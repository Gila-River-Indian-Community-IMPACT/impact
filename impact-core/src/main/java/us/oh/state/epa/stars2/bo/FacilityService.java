/*
 * Generated by XDoclet - Do not edit!
 */
package us.oh.state.epa.stars2.bo;

import java.io.IOException;
import java.rmi.RemoteException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import us.oh.state.epa.stars2.bo.event.ImpactEvent;
import us.oh.state.epa.stars2.bo.event.ImpactEventListener;
import us.oh.state.epa.stars2.database.dao.Transaction;
import us.oh.state.epa.stars2.database.dbObjects.ValidationMessage;
import us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment;
import us.oh.state.epa.stars2.database.dbObjects.complianceReport.LimitTrendReportLineItem;
import us.oh.state.epa.stars2.database.dbObjects.facility.AppPermitSearchResult;
import us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit;
import us.oh.state.epa.stars2.database.dbObjects.facility.Facility;
import us.oh.state.epa.stars2.database.dbObjects.facility.FacilityCemComLimit;
import us.oh.state.epa.stars2.database.dbObjects.facility.FacilityIdRef;
import us.oh.state.epa.stars2.database.dbObjects.facility.FacilityList;
import us.oh.state.epa.stars2.database.dbObjects.facility.FacilityOwner;
import us.oh.state.epa.stars2.database.dbObjects.facility.FacilityPurgeLog;
import us.oh.state.epa.stars2.database.dbObjects.facility.FacilityPurgeSearchLineItem;
import us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRole;
import us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRoleActivity;
import us.oh.state.epa.stars2.database.dbObjects.facility.ModelingExtractResult;
import us.oh.state.epa.stars2.database.dbObjects.facility.emissionUnit.EmissionUnitReplacement;
import us.oh.state.epa.stars2.database.dbObjects.facilityRequest.FacilityRequest;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.Address;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.ApiGroup;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.ContactType;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.FieldAuditLog;
import us.oh.state.epa.stars2.database.dbObjects.workflow.DataDetail;
import us.oh.state.epa.stars2.framework.exception.DAOException;
import us.wy.state.deq.impact.database.dbObjects.continuousMonitoring.ContinuousMonitor;
import us.wy.state.deq.impact.database.dbObjects.report.EiDataImportFacilityInformation;
import us.wy.state.deq.impact.database.dbObjects.tool.FixmeCompany;

/**
 * Service interface for FacilityEJB.
 */
public interface FacilityService {
	
	Set<ImpactEventListener<? extends ImpactEvent>> getListeners();
	 
	Facility cloneFacility(Facility facility, Facility targetFacility, 
			Integer currentUserId) throws DAOException;
	
	ModelingExtractResult[] modelingExtract(Boolean searchTypePolygon, 
			Boolean searchTypeRadial, Double latitudeDegrees, Double longitudeDegrees, 
			Integer distanceMeters, List<String> pollutants, 
			List<String> excludedFacilityTypes,
			Double latitudeSwDegrees, Double longitudeSwDegrees,
			Double latitudeSeDegrees, Double longitudeSeDegrees,
			Double latitudeNeDegrees, Double longitudeNeDegrees,
			Double latitudeNwDegrees, Double longitudeNwDegrees) throws DAOException;
		
	/**
	 * validate contact
	 * 
	 * @param contact
	 *            contact
	 * @return Contact
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact retrieveFacilityContact(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact contact)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * validate contact
	 * 
	 * @param contact
	 *            contact
	 * @return Contact[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact[] retrieveDupFacilityContact(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact contact,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * validate contact
	 * 
	 * @param contact
	 *            contact
	 * @return Contact
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact retrieveFacilityContact(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact contact,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * validate contact
	 * 
	 * @param contact
	 *            contact
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] validateContact(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact contact)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * validate of Emission Unit.
	 * 
	 * @param emissionUnit
	 *            EmissionUnit
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] validateEmissionUnit(
			us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit emissionUnit,
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			boolean internalApp)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SccCode getFullSccCode(
			java.lang.String sccId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * validate of Emission Process.
	 * 
	 * @param emissionProcess
	 *            EmissionProcess
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] validateEmissionProcess(
			us.oh.state.epa.stars2.database.dbObjects.facility.EmissionProcess emissionProcess)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * validate of Release Point.
	 * 
	 * @param egressPoint
	 *            EgressPoint
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] validateEgressPointJustLatLong(
			us.oh.state.epa.stars2.database.dbObjects.facility.EgressPoint egressPoint,
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility fac)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * validate of Release Point.
	 * 
	 * @param egressPoint
	 *            EgressPoint
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] validateEgressPointLatLong(
			us.oh.state.epa.stars2.database.dbObjects.facility.EgressPoint egressPoint,
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility fac)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * validate of Control Equipment.
	 * 
	 * @param controlEquipment
	 *            ControlEquipment
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] validateControlEquipment(
			us.oh.state.epa.stars2.database.dbObjects.facility.ControlEquipment controlEquipment)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Submit facility inventory.
	 * 
	 * @param fpId
	 *            FP Id
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] submitFacilityProfile(
			java.lang.Integer fpId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Validate facility inventory.
	 * 
	 * @param fpId
	 *            FP Id
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] validateFacilityProfile(
			java.lang.Integer fpId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Validate create facility.
	 * 
	 * @param facility
	 *            facility
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] validateCreateFacility(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Get a new facility ID.
	 * 
	 * @param facilityIdRef
	 *            Facility inventory to create
	 * @return Facility Id
	 */
	public java.lang.String getNewFacilityId()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a new facility. This method is only intended to be used for
	 * creating facilities in Stars2.
	 * 
	 * @param Facility
	 *            Facility inventory to create
	 * @return Facility new facility inventory complete with all id's for new
	 *         contained objects
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility createFacility(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility newFacility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * delete facility. This method is only intended to be used for deleting
	 * facility from staging area.
	 * 
	 * @param fpId
	 *            fpId of facility to remove
	 * @return
	 */
	public void removeFacility(java.lang.Integer fpId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * delete facilitycontacts. This method is only intended to be used for
	 * deleting facility contactsfrom staging area.
	 * 
	 * @param fpId
	 *            fpId of facility to remove
	 * @return
	 */
	public void removeFacilityContacts(java.lang.String facilityId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Delete the specified emission unit. An EU can only be deleted if it is a
	 * temporary EU (indicated by an epaEmuId value starting with "TMP") and
	 * there are no emission processes associated with the EU.
	 * 
	 * @param eu
	 *            the Emission Unit to be deleted.
	 * @return
	 */
	public void removeEmissionUnit(
			us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit eu)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a new facility inventory submitted from gateway.
	 * 
	 * @param Facility
	 *            Facility inventory to create from gateway.
	 * @parm trans transaction
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility createFacilityProfileFromGateWay(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility gateWayFacility,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a new facility inventory submitted from gateway.
	 * 
	 * @param Facility
	 *            Facility inventory to create from gateway.
	 * @param newFpId
	 *            FP iD to be used when creating a new Facility
	 * @parm trans transaction
	 */
	public void createFacilityProfileFromGateWay(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility gateWayFacility,
			java.lang.Integer newFpId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Split a facility.
	 * 
	 * @param facility
	 *            Facility to create
	 * @return Facility new splitted facility inventory complete with all id's for
	 *         new contained objects
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility splitFacility(
			java.lang.Integer fpId, java.lang.String newFacilityName,
			java.lang.Integer ownerCompanyId, int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Clone a facility.
	 * 
	 * @param facility
	 *            Facility to create
	 * @return Facility new splitted facility inventory complete with all id's for
	 *         new contained objects
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility cloneFacility(
			Facility facility, String newFacilityName, 
    		int owner, Address phyAddr, int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	/**
	 * Create a new facility inventory. This method is only intended to be used by
	 * the Stars to Stars2 migration utility, since normally a "new" facility
	 * will be migrated from core_lite, i.e. facilities are not
	 * originated/created in Stars2.
	 * 
	 * @param Facility
	 *            Facility inventory to create
	 * @return Facility new facility inventory complete with all id's for new
	 *         contained objects
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility createFacilityProfile(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility newFacility,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a new facility inventory. This method is only intended to be used by
	 * the Stars to Stars2 migration utility, since normally a "new" facility
	 * will be migrated from core_lite, i.e. facilities are not
	 * originated/created in Stars2.
	 * 
	 * @param Facility
	 *            Facility inventory to create
	 * @return Facility new facility inventory complete with all id's for new
	 *         contained objects
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility createFacilityProfile(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility newFacility,
			int userId, us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Update the facility contact as result of gateway submit.
	 * 
	 * @param Facility
	 *            Id Facility ID
	 * @param contacts
	 *            contacts
	 */
	public void updateFacilityContactFromGateWay(
			java.lang.String facilityId,
			java.lang.Integer corePlaceId,
			java.util.List<us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact> contacts,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method is used to mark current facility as history. An update will
	 * cause copy this version.
	 */
	public void markProfileHistory(java.lang.Integer fpId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method is used to split an existing facility and increase the
	 * version number for all version greater than new one.
	 */
	public void splitFacilityProfile(
			java.lang.Integer fpId,
			java.sql.Timestamp revisedDate,
			us.oh.state.epa.stars2.database.dbObjects.facility.FacilityNote historyNote,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.bo.FacilityBO.CopyOnChangeMaps splitFacilityProfile(
			java.lang.Integer fpId,
			java.sql.Timestamp revisedDate,
			us.oh.state.epa.stars2.database.dbObjects.facility.FacilityNote historyNote,
			int userId, us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method is used to retrieve a facility after creating a new version
	 * if thefacility's "copy on change flag" is set and a change to the
	 * facility requires a "versioning" of the facility.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacilityEditable(
			java.lang.Integer fpId, int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method is used to retrieve a facility after creating a new version
	 * if thefacility's "copy on change flag" is set and a change to the
	 * facility requires a "versioning" of the facility.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacilityEditable(
			java.lang.Integer fpId, int userId, Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method is used to copy an existing facility to a new one. This will
	 * be used when a facility's "copy on change flag" is set and a change to
	 * the facility requires a "versioning" of the facility.
	 * 
	 * @param fpId
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility copyFacilityProfile(
			java.lang.Integer fpId, java.sql.Timestamp dateOfChange, int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method is used to create a facility inventory in the staging area
	 * 
	 * @param fpId
	 * @return
	 * @throws DAOException
	 */
	public void createStagingFacilityProfile(java.lang.Integer fpId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method is used to create a facility inventory in the staging area
	 * 
	 * @param fpId
	 * @return created fpId
	 * @throws DAOException
	 */
	public java.lang.Integer createStagingFacilityProfile(
			java.lang.Integer fpId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method is used to create a facility contacts in the staging area
	 * 
	 * @param facilityId
	 * @throws DAOException
	 */
	public void createStagingFacilityContacts(java.lang.String facilityId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void createStagingFacilityContactsWithOutAddType(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact contact)
			throws us.oh.state.epa.stars2.framework.exception.DAOException;

	public us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment createFacilityAttachment(
			us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment facilityAttachment,
			java.io.InputStream fileStream)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment updateFacilityAttachment(
			us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment facilityAttachment)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeFacilityAttachment(
			us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment facilityAttachment)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityNote createFacilityNote(
			us.oh.state.epa.stars2.database.dbObjects.facility.FacilityNote facilityNote)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRUM createFacilityRUM(
			us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRUM facilityRUM)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyFacilityNote(
			us.oh.state.epa.stars2.database.dbObjects.facility.FacilityNote facilityNote)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyFacilityRUM(
			us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRUM facilityRUM)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment[] retrieveFacilityAttachments(
			java.lang.String facilityId) throws java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityNote[] retrieveFacilityNotes(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRUM[] retrieveFacilityRUMs(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRUM retrieveFacilityRUM(
			int rumId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean updateFacilityRoles(
			us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRole[] roles,
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public boolean updateFacilityRoles(Facility facility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean updateBulkFacilityRoles(
			java.lang.String[] facilityIds,
			us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRole[] roles)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This only retrieves Faciliy data and not any contained objects like
	 * Emission Units.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacilityData(
			java.lang.String facilityId, java.lang.Integer versionId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This only retrieves Faciliy data and not any contained objects like
	 * Emission Units.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacilityByCorePlaceId(
			java.lang.Integer corePlaceId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This only retrieves Faciliy data and not any contained objects like
	 * Emission Units.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacilityByCorePlaceId(
			java.lang.Integer corePlaceId, boolean staging)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacilityProfile(
			java.lang.Integer fpId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacilityProfile(
			java.lang.Integer fpId, boolean staging)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacilityProfile(
			java.lang.Integer fpId, boolean staging,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Modifies the supplied facility Rules.
	 * 
	 * @param Facility
	 *            Facility to modify
	 * @return boolean True = success, false = failure.
	 */
	public boolean modifyFacilityFedRules(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Performs all modify functions of modifyFacilityInternal() except it
	 * returns data to perform the facility shutdown notification separately.
	 * 
	 * @param Facility
	 *            Facility to modify
	 * @return boolean True = success, false = failure.
	 */
	public java.util.HashMap<java.lang.String, java.lang.String> modifyFacilityRtnToDo(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Performs facility shutdown notification using the data generated upon an
	 * earlier call to modifyFacility
	 * 
	 * @param Facility
	 *            Facility to modify
	 * @return boolean True = success, false = failure.
	 */
	public void performShutdownToDo(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			int userId,
			java.util.HashMap<java.lang.String, java.lang.String> data)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Performs all modify functions of modifyFacilityInternal() including the
	 * facility shutdown notification.
	 * 
	 * @param Facility
	 *            Facility to modify
	 * @return boolean True = success, false = failure.
	 */
	public boolean modifyFacility(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Performs all modify functions of modifyFacilityInternal() including the
	 * facility shutdown notification.
	 * 
	 * @param Facility
	 *            Facility to modify
	 * @return boolean True = success, false = failure.
	 */
	public boolean modifyFacility(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			int userId, Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Modifies the supplied facility. This method only modifies the facility,
	 * none of the facilities contained objects are updated. To modify an entire
	 * Facility, including contained objects, the FacilityBO should be used.
	 * 
	 * @param Facility
	 *            Facility to modify
	 * @return boolean True = success, false = failure.
	 */
	public java.util.HashMap<java.lang.String, java.lang.String> modifyFacilityInternal(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			int userId, boolean performShutdownToDo)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Just modify data in the fp_facility table.
	 * 
	 * @param Facility
	 *            Facility to modify
	 */
	public void modifyFacilityTable(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves the Facility for the given facility id complete with all of its
	 * EmissionUnits.
	 * 
	 * @param Integer
	 *            Id of the facility to be retrieved.
	 * @return Facility
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacility(
			java.lang.Integer fpId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Given a facility ID, retrieves the latest version of the Facility
	 * complete with all of its EmissionUnits.
	 * 
	 * @param String
	 *            Facility ID
	 * @return Facility
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacility(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacility(
			java.lang.String facilityId, Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public List<ApiGroup> retrieveFacilityApis(Integer fpId)
			throws DAOException;

	public void createFacilityApi(ApiGroup api) throws DAOException;

	public void updateFacilityApi(ApiGroup api) throws DAOException;

	public void deleteFacilityApi(Integer apiCd) throws DAOException;

	public void deleteFacilityAllApis(Integer fpId) throws DAOException;
	
	public boolean deleteFacilityInv(Integer fpId) throws DAOException;

	/**
	 * Given a facility ID, retrieves the latest version of the Facility
	 * complete with all of its EmissionUnits.
	 * 
	 * @param String
	 *            Facility ID
	 * @return Facility
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacility(
			java.lang.String facilityId, boolean staging)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Given a facility ID, retrieves only the data in the fp_facility table for
	 * the latest version of the facility.
	 * 
	 * @param String
	 *            Facility ID
	 * @return Facility
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacilityTable(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all versions of the Facility for the given facility id
	 * 
	 * @param String
	 *            Id of the facility to be retrieved.
	 * @return Facility
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityVersion[] retrieveAllFacilityVersions(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all versions of the Facility for the given facility id; This
	 * method is intended to be used by migration.
	 * 
	 * @param String
	 *            Id of the facility to be retrieved.
	 * @return Facility
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityVersion[] retrieveAllMigFacilityVersions(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.Integer createRelationShip(java.lang.Integer fromFpNodeId,
			java.lang.Integer toFpNodeId, java.lang.Integer fpId,
			java.lang.String audLogOrigVal, java.lang.String audLogNewVal,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void createRelationShip(Integer fromFpNodeId, Integer toFpNodeId,
			Float flowFactor, Transaction trans) throws DAOException;
	
	public java.lang.Integer createRelationShip(java.lang.Integer fromFpNodeId,
			java.lang.Integer toFpNodeId, float flowFactor,
			java.lang.Integer fpId, java.lang.String audLogOrigVal,
			java.lang.String audLogNewVal, int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.Integer removeRelationShip(java.lang.Integer fromFpNodeId,
			java.lang.Integer toFpNodeId, java.lang.Integer fpId,
			java.lang.String audLogOrigVal, java.lang.String audLogNewVal,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit createEmissionUnit(
			us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit emissionUnit,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public String modifyEmissionUnit(
			us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit emissionUnit,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public String modifyEmissionUnit(
			us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit emissionUnit,
			int userId, us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all EmissionUnits for the given facility id including its
	 * "relationships".
	 * 
	 * @param Integer
	 *            Id of the facility for which the requested EmissionUnits
	 *            belong.
	 * @return EmissionUnit[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit[] retrieveFacilityEmissionUnits(
			java.lang.Integer facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieve past versions of an emission unit (i.e. emission unit data for
	 * historical facility inventories, but not the current profile).
	 * 
	 * @param corrEpaEmuId
	 *            the id to uniquely identify this EU
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit[] retrieveEmissionUnitsFromPastProfiles(
			int corrEpaEmuId, java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves only facility level data
	 * 
	 * @param Integer
	 *            Id of the facility for which the requested EmissionUnits
	 *            belong.
	 * @return Facility
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveFacilityData(
			java.lang.Integer fpId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void retrieveFacilityAddresses(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void updateFacilityAddresses(
			java.lang.Integer fpId,
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Address address)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.EmissionProcess createEmissionProcess(
			us.oh.state.epa.stars2.database.dbObjects.facility.EmissionProcess emissionProcess,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeEmissionProcess(
			us.oh.state.epa.stars2.database.dbObjects.facility.EmissionProcess emissionProcess,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyEmissionProcess(
			us.oh.state.epa.stars2.database.dbObjects.facility.EmissionProcess emissionProcess,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves the Emission Unit for the given emission unit id
	 * 
	 * @param Integer
	 *            Id of the facility for which the requested Emission Unit
	 *            belong
	 * @param Integer
	 *            Emission Unit Id of the Emission Unit
	 * @return EmissionUnit
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit retrieveEmissionUnit(
			java.lang.Integer emuId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves the Emission Unit for the given facility id and EPA emission
	 * unit id
	 * 
	 * @param Integer
	 *            Id of the facility for which the requested Emission Unit
	 *            belong
	 * @param String
	 *            EPA Emission Unit Id of the Emission Unit
	 * @return EmissionUnit
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit retrieveEmissionUnit(
			java.lang.Integer facilityId, java.lang.String epaEmuId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves the Emission Process for the given emission process fp node id
	 * 
	 * @param Integer
	 *            FP Node Id of the emission process
	 * @return EmissionProcess
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.EmissionProcess retrieveEmissionProcess(
			java.lang.Integer emissionProcessFpnodeId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all EmissionProcesses for the given facility id including their
	 * "relationships"..
	 * 
	 * @param Integer
	 *            Id of the facility for which the requested EmissionProcesses
	 *            belong.
	 * @return List<EmissionProcess> Keyed by the fp_nodeId
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.facility.FacilityNode> retrieveFacilityEmissionProcesses(
			java.lang.Integer facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.ControlEquipment cloneControlEquipment(
			us.oh.state.epa.stars2.database.dbObjects.facility.ControlEquipment controlEquipment,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyControlEquipment(
			us.oh.state.epa.stars2.database.dbObjects.facility.ControlEquipment controlEquipment,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeControlEquipment(
			us.oh.state.epa.stars2.database.dbObjects.facility.ControlEquipment controlEquipment,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.EgressPoint createEgressPoint(
			us.oh.state.epa.stars2.database.dbObjects.facility.EgressPoint egressPoint,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyEgressPoint(
			us.oh.state.epa.stars2.database.dbObjects.facility.EgressPoint egressPoint,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeEgressPoint(
			us.oh.state.epa.stars2.database.dbObjects.facility.EgressPoint egressPoint,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all ControlEquipments for the given facility id including their
	 * "relationships".
	 * 
	 * @param Integer
	 *            Id of the facility for which the requested ControlEquipments
	 *            belong.
	 * @return List<ControlEquipment> Keyed by fp_nodeId
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.facility.FacilityNode> retrieveFacilityControlEquipment(
			java.lang.Integer facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all EgressPoints for the given facility id including their
	 * "relationships".
	 * 
	 * @param Integer
	 *            Id of the facility for which the requested EgressPoints
	 *            belong.
	 * @return List<FacilityNode> Keyed by fp_nodeId
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.facility.FacilityNode> retrieveFacilityEgressPoints(
			java.lang.Integer facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all facility contacts defined in the DB, for the given fp_id.
	 * 
	 * @return Contact[]
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact> retrieveFacilityContacts(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all facility contacts defined in the DB, for the given facioity
	 * ID.
	 * 
	 * @return Contact[]
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact> retrieveFacilityContacts(
			java.lang.String facilityId, boolean staging)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all facility contacts defined in the DB, for the given facioity
	 * ID from staging if exists; otherwise from readonly DB.
	 * 
	 * @return Contact[]
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact> retrieveAnyFacilityContacts(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all facilities matching the criteria parameters supplied.
	 * Suppling all "nulls" will return all facilities in the DB.
	 * 
	 * @param String
	 *            facilityName either the exact name of the facility, a
	 *            wildcarded string or null.
	 * @param String
	 *            facilityId either the exact ID, a wildcarded string or null.
	 * @param Integer
	 *            counyId the exact county ID or null.
	 * @param String
	 *            operatingStatusCd either the exact operating status CD, or
	 *            null.
	 * @param String
	 *            doLaaCd either the exact DO-LAA CD, or null.
	 * @param String
	 *            emissionReportCategoryCd either the exact
	 *            emissionReportCategoryCd, or null.
	 * @param String
	 *            permitClassCd either the exact permitClassCd, or null
	 * @param String
	 *            tvPermitStatusCd either the exact tvPermitStatusCd, or null
	 * @return FacilityList[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityList[] searchFacilities(
			java.lang.String facilityName, java.lang.String facilityId,
			java.lang.String companyName, java.lang.Integer corePlaceId,
			java.lang.String countyCd, java.lang.String operatingStatusCd,
			java.lang.String doLaaCd, java.lang.String naicsCd,
			java.lang.String permitClassCd, java.lang.String tvPermitStatusCd,
			java.lang.String address1, java.lang.String city,
			java.lang.String zip5, java.lang.String portable,
			java.lang.String portableGroupCd, boolean unlimitedSearch,
			java.lang.String facilityTypeCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all facilities matching the criteria parameters supplied.
	 * Suppling all "nulls" will return all facilities in the DB.
	 * 
	 * @param String
	 *            facilityName either the exact name of the facility, a
	 *            wildcarded string or null.
	 * @param String
	 *            facilityId either the exact ID, a wildcarded string or null.
	 * @param String
	 *            operatingStatusCd either the exact operating status CD, or
	 *            null.
	 * @param String
	 *            permitClassCd either the exact permitClassCd, or null
	 * @return FacilityList[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityEmissionUnit[] searchEuStatus(
			java.lang.String facilityName, java.lang.String facilityId,
			java.lang.String facilityOperatingStatusCd,
			java.lang.String euOperatingStatusCd, java.lang.String doLaaCd,
			java.lang.String permitClassCd, boolean unlimitedSearch)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all facilities matching the criteria parameters supplied.
	 * Suppling all "nulls" will return all facilities in the DB.
	 * 
	 * @param String
	 *            facilityName either the exact name of the facility, a
	 *            wildcarded string or null.
	 * @param String
	 *            facilityId either the exact ID, a wildcarded string or null.
	 * @param Integer
	 *            counyId the exact county ID or null.
	 * @param String
	 *            doLaaCd either the exact DO-LAA CD, or null.
	 * @return FacilityList[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityList[] searchTvPermitFacilities(
			java.lang.String facilityName, java.lang.String facilityId,
			java.lang.String countyCd, java.lang.String doLaaCd,
			boolean unlimitedResults)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all facilities matching the criteria parameters supplied.
	 * Suppling all "nulls" will return all facilities in the DB.
	 * 
	 * @param String
	 *            facilityName either the exact name of the facility, a
	 *            wildcarded string or null.
	 * @param String
	 *            facilityId either the exact ID, a wildcarded string or null.
	 * @param Integer
	 *            counyId the exact county ID or null.
	 * @param String
	 *            doLaaCd either the exact DO-LAA CD, or null.
	 * @return FacilityList[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityList[] searchTvExpFacilities(
			java.lang.String facilityName, java.lang.String facilityId,
			java.lang.String countyCd, java.lang.String doLaaCd,
			boolean unlimitedResults)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all facilities matching the criteria parameters supplied.
	 * Suppling all "nulls" will return all facilities in the DB.
	 * 
	 * @param FacilityHistList
	 *            Filters: name, description
	 * @return FacilityHistList[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityHistList[] searchFacilitiesHist(
			us.oh.state.epa.stars2.database.dbObjects.facility.FacilityHistList searchFacility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves facility data for the facility matching the specified
	 * facilityId where the specified date is after the facility inventory begin
	 * date and before the end date (if there is one). If no match is made by
	 * date, the current facility inventory is returned. If no facility with the
	 * specified facilityId is found, null is returned.
	 * 
	 * @param facilityId
	 * @param date
	 * @return FacilityHistList[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityHistList searchFacilitiesHist(
			java.lang.String facilityId, java.sql.Timestamp date)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Creates a new EventLog object in the database.
	 * 
	 * @param el
	 *            EventLog The object to be created.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.EventLog createEventLog(
			us.oh.state.epa.stars2.database.dbObjects.facility.EventLog el)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Creates attributes value change event logs.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.EventLog[] createFieldChangeEventLog(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.FieldAuditLog[] fieldChgLog,
			java.lang.String eventTypeCd, java.lang.Integer userId,
			java.lang.Integer fpId, java.lang.String facilityId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Creates attributes value change to Do logs.
	 */
	public void createFieldChangeToDoLog(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.FieldAuditLog[] fieldChgLog,
			java.lang.String facilityId, java.lang.Integer fpId,
			us.oh.state.epa.stars2.database.dao.Transaction trans,
			java.lang.String facRoleCd, java.lang.String taskName)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public void createFieldAuditLog(FieldAuditLog[] auditLog, int userId) throws DAOException;

	/**
	 * Retrieve EventLog objects in the database.
	 * 
	 * @param el
	 *            EventLog The object to filter.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.EventLog[] retrieveEventLogs(
			us.oh.state.epa.stars2.database.dbObjects.facility.EventLog el)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieve roles for specified facility
	 * 
	 * @param facilityId
	 *            identifier for facility.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRole[] retrieveFacilityRoles(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieve facility roles for specified user
	 * 
	 * @param userId
	 *            .
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRole[] retrieveFacilityRolesByUserId(
			java.lang.Integer userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.LinkedHashMap<java.lang.String, java.lang.String> retrieveEventTypeCdAndDesc()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.workflow.DataDetail[] retrieveContEquipDataDetail(
			java.lang.String contEquipType)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.MultiEstabFacilityList[] retrieveMutliEstabFacilities(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.Facility retrieveMutliEstabFacilityAirProgInfo(
			java.lang.String scscId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void createToDoEntry(java.lang.Integer fpId,
			java.util.HashMap<java.lang.String, java.lang.String> data,
			java.lang.String expedite, java.sql.Timestamp startDt,
			java.sql.Timestamp dueDt, java.lang.Integer userId,
			us.oh.state.epa.stars2.database.dao.Transaction trans,
			java.lang.Integer createUserId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Creates a new DataDetail object in the database.
	 * 
	 * @param data
	 *            DetailDef The object to be created.
	 * @param equipmentTypeCd
	 *            Equipement Type Code.
	 * @throws DAOException
	 *             Database access error.
	 */
	public void createEquipDetailDef(
			us.oh.state.epa.stars2.database.dbObjects.workflow.DataDetail data,
			java.lang.String equipmentTypeCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Creates a new DataDetail object in the database.
	 * 
	 * @param data
	 *            DetailDef The object to be created.
	 * @param equipmentTypeCd
	 *            Equipement Type Code.
	 * @throws DAOException
	 *             Database access error.
	 */
	public void modifyEquipDetailDef(
			us.oh.state.epa.stars2.database.dbObjects.workflow.DataDetail data,
			java.lang.String equipmentTypeCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves facility summary from core DB
	 * 
	 * @param String
	 *            core place ID
	 * @return FacilitySummary
	 */
	public us.oh.state.epa.place.facility.FacilitySummary retrieveFacilitySummaryFromCoreDB(
			java.lang.String corePlaceId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean changeFacilityId(
			java.lang.String currentFacilityId,
			us.oh.state.epa.stars2.database.dbObjects.facility.FacilityIdRef facIdRef,
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility currFacility,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean changeGateWayFacilityId(java.lang.String currentFacilityId,
			java.lang.String newFacilityId, java.lang.String dolaCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityList[] retrieveTvCertLate(
			java.lang.Integer reportYear, java.lang.String facilityId,
			java.lang.String facilityName, java.lang.String operatingStatusCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityList[] retrieveTvCertReminder(
			java.lang.Integer reportYear, java.lang.String facilityId,
			java.lang.String facilityName)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.SubmissionLog[] searchSubmissionLog(
			us.oh.state.epa.stars2.database.dbObjects.facility.SubmissionLog searchSubmissionLog,
			java.sql.Timestamp beginDate, java.sql.Timestamp endDate)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Get list of documents associated with the application.
	 * 
	 * @param app
	 * @return
	 * @throws DAOException
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.document.Document> getPrintableDocumentList(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws java.rmi.RemoteException;

	/**
	 * Return pdf version of application as an InputStream.
	 * 
	 * @param app
	 * @param hideTradeSecret
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityProfileDocument createFacilityProfilePDFDocument(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			java.lang.String userName)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Generate a pdf file containing data from the facility and create a
	 * temporary Document object refrencing this file.
	 * 
	 * @param fpId
	 *            the facility FP ID to be rendered in a PDF file.
	 * @return Document object referencing pdf file.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.document.TmpDocument generateTempFacilityProfileReport(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility, String prefix)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Write pdf version of facility inventory to an output stream.
	 * 
	 * @param facility
	 * @param os
	 * @throws DAOException
	 */
	public void writeFacilityProfileToStream(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			java.io.OutputStream os,
			java.lang.String titleSuffix) throws java.io.IOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityProfileDocument getFacilityProfileReportDocument(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws java.rmi.RemoteException;

	/**
	 * Create a zip file containing facility pdf file.
	 * 
	 * @param app
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.document.Document generateTempFacilityProfilePDFZipFile(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws java.io.FileNotFoundException, java.io.IOException,
			java.rmi.RemoteException;

	/**
	 * Add attestation document to compliance report
	 * 
	 * @param facility
	 * @param attestationDoc
	 * @param trans
	 * @throws DAOException
	 */
	public void addAttestationDocument(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment attestationDoc,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Remove attestation document to compliance report
	 * 
	 * @param facility
	 * @param trans
	 * @throws DAOException
	 */
	public void removeAttestationDocument(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Return pdf file RO can sign as attestation document.
	 * 
	 * @param facility
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment createFacilityAttestationDocument(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void addSubmissionAttachments(
			us.oh.state.epa.stars2.database.dbObjects.Task task)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.io.IOException, java.io.FileNotFoundException,
			java.rmi.RemoteException;

	/**
	 * This returns overall compliance status for a facility.
	 * 
	 * @param tring
	 *            curFacId
	 * @return boolean
	 */
	public java.lang.String getOverallComplianceStatus(java.lang.String curFacId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public List<Contact> retrieveFacilityActiveContacts(String facilityId,
			boolean b) throws DAOException;

	public List<Contact> retrieveAllContacts() throws DAOException;

	public List<Contact> retrieveAllReadOnlyContactsForStaging()
			throws DAOException;

	public List<Contact> retrieveActiveFacilityContacts(String facilityId,
			boolean staging) throws DAOException;

	public List<FacilityOwner> retrieveFacilityOwners(String facilityId)
			throws DAOException;

	public FacilityOwner retrieveFacilityOwner(String facilityId)
			throws DAOException;

	public void modifyFacilityOwner(FacilityOwner oldOwner,
			FacilityOwner newOwner) throws DAOException;

	public void addFacilityOwner(FacilityOwner newOwner) throws DAOException;

	/**
	 * Changes the ownership of a list of facilities. This method will first
	 * validate the change of ownership. It will then time out all of a
	 * facility's contacts and current owner. It will then add the appropriate
	 * contact types for the change of ownership. It will end by adding the new
	 * owner and returning validation messages if change ownership does not
	 * validate.
	 * 
	 * @param facilities
	 * @param environmentalContactId
	 * @param responsibleOfficialContactId
	 * @param facilityOwnerCmpId
	 * @param ownershipChangeDate
	 * @return Validation messages
	 * @throws DAOException
	 */
	public List<ValidationMessage> changeOwnership(FacilityList[] facilities,
			Integer environmentalContactId,
			Integer responsibleOfficialContactId, String facilityOwnerCmpId,
			Timestamp ownershipChangeDate) throws DAOException;

	public List<ValidationMessage> addNewContactType(FacilityList[] facilities,
			ContactType newContactType) throws DAOException;

	public Facility retrieveFacilityByFacilityId(String facilityId, boolean b)
			throws DAOException;

	List<Contact> retrieveAllContacts(boolean staging) throws DAOException;

	List<Contact> retrieveStagedContactsByFacilityId(String facilityId)
			throws DAOException;

	void retrieveFacilityAddressesFromStaging(Facility facility)
			throws DAOException;

	public Facility transferEmissionUnit(Facility sourceFacility,
			Integer targetFpId, boolean changeStatus, Timestamp euShutdownDate,
			int userId) throws DAOException;

	void migrateWiseViewData(boolean deleteExistingData,
			String migrationTempFolder, String logPath) throws DAOException;
	
	void deleteFacilityInventory(String migrationTempFolder, String logPath) throws DAOException;
	
	Integer preserveFacilityInventory(String migrationTempFolder, String logPath) throws DAOException;
	
	public List<EmissionUnitReplacement> retrieveEmissionUnitReplacements(
			Integer emuId) throws DAOException;

	public ValidationMessage[] validateEuEmissions(EmissionUnit emissionUnit)
			throws DAOException;

	public void retrieveEuEmissions(EmissionUnit emissionUnit)
			throws DAOException;

	public void saveEmissionUnitReplacements(
			List<EmissionUnitReplacement> emissionUnitReplacements,
			Integer emuId) throws DAOException;

	public List<FixmeCompany> retrieveFixmeCompanies() throws DAOException;

	public boolean removeFixmeCompanies() throws DAOException;
	
	public boolean modifyFacilityFedRulesAndRegsSubparts(Facility facility, Transaction trans)
			throws DAOException, RemoteException;

    public FacilityIdRef[] retrieveFacilityIdRefs(String countyCd)
            throws DAOException;

	public Map<String, ArrayList<DataDetail>> retrieveControlEquipmentDataDetails()
			throws DAOException;

	public void saveEmissionUnitPTE(EmissionUnit eu) throws DAOException;
	
	public EmissionUnit retrieveEmissionUnitByCorrEpaEmuId(Integer fpId, Integer corrEpaEmuId)
			throws DAOException;
	
	/**
	 * Validate new facility request.
	 * 
	 * @param facility
	 *            facility
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] validateNewFacilityRequest(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	/**
	 * Create a new facility request submitted from the portal.
	 * 
	 * @param FacilityRequest
	 *            Facility request to create
	 * @return String 
	 * 			new facility request id
	 */
	
	public String createNewFacilityRequestFromGateWay( 
			us.oh.state.epa.stars2.database.dbObjects.facilityRequest.FacilityRequest facilityRequest)
			throws us.oh.state.epa.stars2.framework.exception.DAOException;
	
	/**
	 * Retrieves all facilities matching the criteria parameters supplied.
	 * Suppling all "nulls" will return all facilities in the DB.
	 * 
	 * @param String
	 *            facilityName either the exact name of the facility, a
	 *            wildcarded string or null.
	 * @param String
	 *            requestId either the exact ID, a wildcarded string or null.
	 * @param Integer
	 *            counyId the exact county ID or null.
	 * @param String
	 *            operatingStatusCd either the exact operating status CD, or
	 *            null.
	 * @param String
	 *            doLaaCd either the exact DO-LAA CD, or null.
	 * @param String
	 *            emissionReportCategoryCd either the exact
	 *            emissionReportCategoryCd, or null.
	 * @param String
	 *            permitClassCd either the exact permitClassCd, or null
	 * @param String
	 *            tvPermitStatusCd either the exact tvPermitStatusCd, or null
	 * @return FacilityList[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.facility.FacilityRequestList[] searchFacilityRequests(
			java.lang.String facilityName, java.lang.String requestId,
			java.lang.String companyName,
			java.lang.String countyCd, java.lang.String operatingStatusCd,
			java.lang.String doLaaCd, java.lang.String firstName,
			java.lang.String lastName, java.lang.String externalUsername,
			java.lang.String address1, java.lang.String cntId,
			java.lang.String phone, java.lang.String email,
			java.lang.String requestState, boolean unlimitedSearch,
			java.lang.String facilityTypeCd,
			java.lang.Integer companyId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.facilityRequest.FacilityRequest retrieveFacilityRequest(
			java.lang.Integer requestId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public java.lang.Integer retrieveFacilityRequestCount(
			java.lang.Integer companyId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	/**
	 * Performs all modify functions of modifyFacilityRequestInternal().
	 * 
	 * @param FacilityRequest
	 *            FacilityRequest to modify
	 * @return boolean True = success, false = failure.
	 */
	
	public boolean modifyFacilityRequest(
			us.oh.state.epa.stars2.database.dbObjects.facilityRequest.FacilityRequest facilityRequest,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public void deleteFacilityRequest(FacilityRequest facilityRequest)
			throws DAOException;

	boolean updateFacilityRoles(FacilityRole[] facilityRoles, int userId, String facilityRoleCd)
					throws DAOException;

	FacilityRole[] retrieveFacilityRoles(FacilityList[] selectedFacilities,Integer userId)
		throws DAOException;

	FacilityRole[] retrieveFacilityRoles(FacilityList[] selectedFacilities,
			String facilityRole, int currentUserId)
		throws DAOException;

	AppPermitSearchResult[] appPermitSearch(String searchCmpId,
			String searchFacilityId, Integer searchType, Integer appPermitType)
					throws DAOException;
	
	// Facility CEM/COM/CMS Limits
	
	public List<FacilityCemComLimit> retrieveFacilityCemComLimitListByFpId(
			Integer fpId, boolean staging) throws DAOException;
	
	public List<FacilityCemComLimit> retrieveFacilityCemComLimitListByMonitorId(
			Integer monitorId, boolean staging) throws DAOException;

	public FacilityCemComLimit createFacilityCemComLimit(FacilityCemComLimit fccl)
			throws DAOException;

	public FacilityCemComLimit modifyFacilityCemComLimit(FacilityCemComLimit fccl)
			throws DAOException;

	public Integer removeFacilityCemComLimit(FacilityCemComLimit fccl)
			throws DAOException;
	
	FacilityCemComLimit retrieveFacilityCemComLimitByMonitorIdAndCorrId(Integer monitorId, 
			Integer corrLimitId) throws DAOException;
	
	ArrayList<LimitTrendReportLineItem> retrieveLimitTrendData(
			Integer corrLimitId, String facilityId) throws DAOException;
	
	ArrayList<LimitTrendReportLineItem> retrievePeriodicLimitTrendData(
			Integer corrLimitId, String facilityId) throws DAOException;
	
	public java.lang.Integer retrieveCemsComplianceReportCountWithMonitor(
			java.lang.Integer corrMonitorId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.Integer retrieveCemsComplianceReportCountWithLimit(
			java.lang.Integer corrLimitId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
			
	Facility retrieveFacilityWithMonitorsAndLimits(String facilityId) throws DAOException;
	
	public ContinuousMonitor retrieveCompleteContinuousMonitor(ContinuousMonitor cm, boolean staging)
			throws us.oh.state.epa.stars2.framework.exception.DAOException;
	
	List<String> retrieveFacilitiesWithMatchingApiNumber(String apiNo,
			String facilityId) throws DAOException;
	
	public java.lang.Integer retrieveAddressIdForFacilityOnLastDOP(
			java.lang.String facilityId,
			java.lang.String lastDayOfPeriod
			)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public String bulkUpdateFacilityRoles(String roleCd, FacilityList[] selectedFacilities, Integer currentUserId, Integer userIdForRole)
			throws us.oh.state.epa.stars2.framework.exception.DAOException;

	EmissionUnit retrieveEmissionUnitFromCurrentProfile(int corrEpaEmuId, String facilityId) throws DAOException;

	ArrayList<EiDataImportFacilityInformation> retrieveEiDataImportFacilityInformation()
			throws DAOException;
	
	Facility updateLatSubmissionType(Facility facility) throws DAOException;

	List<String> retrieveInspectionIdsForCemComId(Integer limitId) throws DAOException;

	boolean isMonitorLimitsIncludedInInspectionReport(List<Integer> limitIds) throws DAOException;

	List<FacilityRoleActivity> retrieveActivitiesByFacilityRole(String facilityRoleCd) throws DAOException;

	public List<FacilityPurgeSearchLineItem> retrieveFacilityListForPurging(Integer retentionPolicyActiveRecordMonths) throws DAOException;
	
	public List<FacilityPurgeLog> retrieveFacilityPurgeLogs() throws DAOException;
	
	public FacilityPurgeLog createFacilityPurgeLog(FacilityPurgeLog facilityPurgeLog) throws DAOException;
	
	public void deleteFacilityFieldAuditLog(String facilityId) throws DAOException; 
	
	public boolean deleteFacilitySubmissiontLogs(String facilityId) throws DAOException; 

	public void deleteFacilityEventLogs(Integer fpId) throws DAOException;
	
	public void deleteFacilityInventory(Integer fpId) throws DAOException;

	public void deleteFacility(String facilityId) throws DAOException;
	
	public boolean deleteFacilityAttachments(Attachment attachment) throws DAOException;

	
}
/*
 * Generated by XDoclet - Do not edit!
 */
package us.oh.state.epa.stars2.bo;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import us.oh.state.epa.stars2.database.dbObjects.application.Application;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.Note;
import us.oh.state.epa.stars2.database.dbObjects.permit.EmissionsOffset;
import us.oh.state.epa.stars2.database.dbObjects.permit.NSRFixedCharge;
import us.oh.state.epa.stars2.database.dbObjects.permit.PTIOPermit;
import us.oh.state.epa.stars2.database.dbObjects.permit.Permit;
import us.oh.state.epa.stars2.database.dbObjects.permit.PermitChargePayment;
import us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument;
import us.oh.state.epa.stars2.database.dbObjects.permit.PermitWorkflowSearchResult;
import us.oh.state.epa.stars2.database.dbObjects.permit.TimeSheetRow;
import us.oh.state.epa.stars2.def.NSRBillingStandardFeesDef;
import us.oh.state.epa.stars2.def.PermitWorkflowActivityBenchmarkDef;
import us.oh.state.epa.stars2.framework.exception.DAOException;
import us.oh.state.epa.stars2.framework.exception.InvoiceGenerationException;

/**
 * Service interface for PermitEJB.
 */
public interface PermitService {
	
	public PermitWorkflowActivityBenchmarkDef[] retrievePermitWorkflowActivityBenchmarkDefs()
			throws DAOException;

	public List<PermitWorkflowSearchResult> searchPermitWorkflows(String facilityId,
			String facilityNm, String permitNumber,	String applicationNumber,
			Integer userId, String permitType, String activityNm,
			String activityStatusCd, Date startDateFrom, Date startDateTo,
			Date endDateFrom, Date endDateTo, Integer processId, boolean filterSkipped, 
			boolean filterNonStarted)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.String generatePermitNumber()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument uploadTempDocument(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument doc,
			java.io.InputStream is)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument uploadDocument(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument doc,
			java.io.InputStream is,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument cloneTempDocument(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument docToClone,
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument doc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument generateTempDocument(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit,
			us.oh.state.epa.stars2.database.dbObjects.document.TemplateDocument templateDoc,
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument doc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.permit.Permit> search(
			java.lang.String applicationNumber, java.lang.String euId,
			java.lang.String cmpId, java.lang.String permitType,
			java.lang.String permitReason, java.lang.String permitLevelStatusCd,
			java.lang.String legacyPermitNumber, java.lang.String permitNumber,
			java.lang.String facilityID, java.lang.String facilityName,
			java.lang.String permitStatusCd, java.lang.String dateBy,
			java.sql.Timestamp beginDate, java.sql.Timestamp endDate,
			java.lang.String permitEUStatusCd, boolean unlimitedResults, String permitFeeBalanceTypeCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.permit.PTIOPermit> searchPermitsForFinalInvoice(
			java.lang.String cmpId,
			java.lang.String facilityID, java.lang.String facilityName,
			boolean unlimitedResults)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.permit.Permit> searchPERs(
			java.lang.String facilityID, java.sql.Timestamp beginDate,
			java.sql.Timestamp endDate)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitInfo retrievePermit(
			int permitID)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
			
	public us.oh.state.epa.stars2.database.dbObjects.permit.Permit retrievePermitLight(
			int permitID)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all active permits for a given EU.
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.permit.Permit> searchEuPermits(
			java.lang.Integer corrEuId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all permits for a given EU.
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.permit.Permit> searchAllEuPermits(
			java.lang.Integer corrEuId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.Permit retrievePermit(
			java.lang.String permitNumber)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This won't create permit document in the permit object.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitInfo createPermit(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This won't create permit document in the permit object. reasonCDs,
	 * SupersededPermits, Applications, EuGroups
	 * 
	 * @param permit
	 * @param trans
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.permit.Permit createPermit(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit,
			int userId, us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyPermit(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public boolean modifyPermitDocuments(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
/*
	public boolean convertToPTI(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
*/
	public void removePermit(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitEUGroup retrieveEUGroup(
			int euGroupID)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitEUGroup createEUGroup(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitEUGroup euGroup)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitEUGroup createEUGroup(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitEUGroup euGroup,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyEUGroup(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitEUGroup euGroup)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeEUGroup(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitEUGroup euGroup)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitEU retrievePermitEU(
			int permitEUID)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitEU createEU(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitEU eu,
			java.lang.String permitType)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyEU(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitEU eu,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeEU(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitEU eu)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] synchPermitEUs(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit)
			throws java.rmi.RemoteException;

	/**
	 * Used to prepare documents for issuance.
	 * 
	 * @deprecated This feature is no longer used in IMPACT
	 * @param permitID
	 * @param userID
	 * @param issuanceType
	 * @throws us.oh.state.epa.stars2.framework.exception.DAOException
	 * @throws java.rmi.RemoteException
	 */
	@Deprecated
	public void prepareIssuance(int permitID, int userID,
			java.lang.String issuanceType)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void modifyPermit(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit,
			int userId, us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.sql.Timestamp findExpirationDate(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void markReadyIssuance(int permitID, java.lang.String issuanceType,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void unprepareDraftIssuance(int permitID,
			java.lang.String issuanceType, int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage finalizeIssuance(
			int permitID, java.lang.String issuanceType,
			boolean updatesOnFinal, int userId,
			us.oh.state.epa.aport.admin.domain.User user)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Handle facility, permit, and EU updates specific to PBRs. See LSRD
	 * Worksheet "tables" 5163D:5166G "PBR Workflow Completes (assuming this
	 * includes a permit revocation if it was needed).
	 * 
	 * @param permit
	 *            Permit modification to finalize.
	 * @param facility
	 *            Facility to be updated on finalization of permit.
	 * @param facBO
	 *            Facility business object.
	 * @throws DAOException
	 *             If anything goes wrong.
	 */
	/*
	public void updateFinalPBR(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
    */
	/**
	 * Returns all of the reasons currently defined in the system for the
	 * permitType.
	 * 
	 * @return SimpleDef[] All reasons of this type.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrievePermitReasons(
			java.lang.String permitType)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns all of the reasons currently defined in the system.
	 * 
	 * @return SimpleDef[] All reasons of this type.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrieveAllPermitReasons()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns all of the permit comments by permit ID.
	 * 
	 * @param int The permit ID
	 * 
	 * @return Note[] All comments of this permit.
	 * @throws DAOException
	 *             Database access error.
	 */
	public Note[] retrievePermitComments(int permitID)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	/**
	 * Returns all of the reasons currently defined in the system.
	 * 
	 * @return SimpleDef[] All reasons of this type.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrieveAllPermitTypes()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitNote createPermitNote(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitNote permitNote)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitNote createPermitNote(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitNote permitNote,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void unDeadendPermit(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyPermitNote(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitNote permitNote)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ValidationMessage> finalizeIssuances(
			java.util.List<java.lang.Integer> pIDs,
			java.lang.String issuanceType, boolean updateProfile, int userId,
			us.oh.state.epa.aport.admin.domain.User user)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrieveModelGeneralPermitDefs(
			java.lang.String generalPermitTypeCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleIdDef[] retrieveSupersedablePermits(
			java.lang.Integer facilityEUID, java.lang.String permitType)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleIdDef[] retrieveSupersedableTVPermits(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create the file system subdirectory for a permit.
	 */
	public void createPermitDir(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit)
			throws java.io.IOException, java.rmi.RemoteException;

	/**
	 * Remove the file system subdirectory for a permit.
	 */
	public void removePermitDir(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit)
			throws java.io.IOException, java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleIdDef[] retrieveRPRPermitList(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.String zipPermitDocs(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument[] docs,
			java.lang.String permitNbr, java.lang.String stage, int userId,
			us.oh.state.epa.stars2.database.dbObjects.document.Document appDoc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitActivitySearch[] searchPermitActivity(
			us.oh.state.epa.stars2.database.dbObjects.permit.PermitActivitySearch pa)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieve permit documents by the retrievePermitIssuanceDocuments SQL in
	 * PermitSQL.xml
	 * 
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.document.Document[] retrievePermitIssuanceDocuments()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method should be called whenever an EU is shutdown. It will mark the
	 * associated permit EU records as terminated.
	 */
	public void terminatePermitEUsForShutdownEU(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit eu)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removePermitDocument(us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument permitDoc) 
			throws us.oh.state.epa.stars2.framework.exception.DAOException;
	
	public void savePermitApplications (Permit permit) throws us.oh.state.epa.stars2.framework.exception.DAOException;
	
	public void removePermitApplication(Application permitApp) throws us.oh.state.epa.stars2.framework.exception.DAOException;
	
	public boolean isDuplicatePermitNumber(java.lang.String permitNumber)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public boolean isDuplicateLegacyPermitNumber(java.lang.String legacyPermitNumber, String permitNumber)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	/**
	 * Get a new Permit Number.
	 * 
	 * @return Permit Number
	 */
	public java.lang.String getNewPermitNumber() 
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public List<PermitChargePayment> retrievePermitChargePaymentList(
			Integer permitId) throws DAOException;
	
	public BigDecimal retrievePermitChargePaymentTotal(
			Integer permitId) throws DAOException;

	public void createPermitChargePayment(PermitChargePayment pcp)
			throws DAOException;

	public void modifyPermitChargePayment(PermitChargePayment pcp)
			throws DAOException;

	public void removePermitChargePayment(PermitChargePayment pcc)
			throws DAOException;
	
	public TimeSheetRow[] retrieveTimeSheetHours(Permit permit);
	
	public boolean generateNSRPermitInvoice(Permit permit, String invoiceType, Timestamp invoiceRefDate) 
			throws DAOException, InvoiceGenerationException;
	
	public List<TimeSheetRow> getBillableTimeSheetRows(Permit permit, TimeSheetRow[] tsRows,
											Timestamp invoiceRefDate);
	
	public List<NSRFixedCharge> retrieveNSRFixedChargeList(
			Integer permitId) throws DAOException;

	public void createNSRFixedCharge(NSRFixedCharge pcp)
			throws DAOException;

	public void modifyNSRFixedCharge(NSRFixedCharge pcp)
			throws DAOException;

	public void removeNSRFixedCharge(NSRFixedCharge pcc)
			throws DAOException;
	
	public NSRBillingStandardFeesDef[] retrieveStandardFeeDef() throws DAOException;
	
	public List<TimeSheetRow> getPreviouslyBilledTSRows(Permit permit, TimeSheetRow[] tsRows, Timestamp invoiceRefDate);
	
	public List<NSRFixedCharge> getBillableFixedCharges(Permit permit, Timestamp invoiceRefDate);
	
	public List<NSRFixedCharge> getPreviouslyBilledFixedCharges(Permit permit, Timestamp invoiceRefDate);
	
	public boolean isTimesheetEntryEnabled();
	
	public  boolean isCurrentBalanceValid(Permit permit, Timestamp invoiceRefDate) throws DAOException;
	
	EmissionsOffset createPermitEmissionsOffset(EmissionsOffset emissionsOffset) throws DAOException;
	
	EmissionsOffset retrievePermitEmissionsOffset(Integer emissionsOffsetId) throws DAOException;
	
	boolean modifyPermitEmissionsOffset(EmissionsOffset emissionsOffset) throws DAOException;
	
	void deletePermitEmissionsOffset(Integer emissonsOffsetId) throws DAOException;
	
	EmissionsOffset[] retrievePermitEmissionsOffsetByPermitId(Integer permitId) throws DAOException;
	
	void regenerateOffsetTrackingEntries(PTIOPermit permit) throws DAOException;
	
	boolean deleteLegacyPermit(us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit) throws DAOException; 
	
	void markInactiveNSRPermitsToExpired()
			throws us.oh.state.epa.stars2.framework.exception.DAOException, java.rmi.RemoteException;
	
	/**
	 * 
	 * @param documentId
	 * @return PermitDocument
	 * @throws DAOException
	 */
	PermitDocument retrievePermitDocumentById(Integer documentId) throws DAOException;
	
	/**
	 * 
	 * @param permitNumber
	 * @return permitWorkflowProcessId
	 * @throws DAOException
	 */
	Integer retrievePermitWorkflowProcessId(String permitNumber) throws DAOException;

	public void deletePermit(final Integer permitId) throws DAOException;
}
	

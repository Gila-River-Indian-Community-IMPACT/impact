/*
 * Generated by XDoclet - Do not edit!
 */
package us.oh.state.epa.stars2.bo;

import java.io.IOException;
import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipOutputStream;

import us.oh.state.epa.stars2.database.dao.Transaction;
import us.oh.state.epa.stars2.database.dbObjects.ValidationMessage;
import us.oh.state.epa.stars2.database.dbObjects.application.Application;
import us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocument;
import us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocumentRef;
import us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU;
import us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEUFugitiveLeaks;
import us.oh.state.epa.stars2.database.dbObjects.application.FacilityWideRequirement;
import us.oh.state.epa.stars2.database.dbObjects.application.NSRApplicationBACTEmission;
import us.oh.state.epa.stars2.database.dbObjects.application.NSRApplicationLAEREmission;
import us.oh.state.epa.stars2.database.dbObjects.application.PTIOApplication;
import us.oh.state.epa.stars2.database.dbObjects.application.PTIOApplicationEU;
import us.oh.state.epa.stars2.database.dbObjects.application.TVApplication;
import us.oh.state.epa.stars2.database.dbObjects.application.TVApplicationEU;
import us.oh.state.epa.stars2.database.dbObjects.application.TVEUOperationalRestriction;
import us.oh.state.epa.stars2.database.dbObjects.application.TVEUPollutantLimit;
import us.oh.state.epa.stars2.database.dbObjects.document.Document;
import us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit;
import us.oh.state.epa.stars2.def.ApplicationDocumentTypeDef;
import us.oh.state.epa.stars2.def.TVApplicationDocumentTypeDef;
import us.oh.state.epa.stars2.framework.exception.DAOException;

/**
 * Service interface for ApplicationEJB.
 */
public interface ApplicationService {
	
	static final String APPLICATION_ZIP_FILE = "Application zip file";

	ApplicationEU replaceApplicationEU(Application application, 
			ApplicationEU appEU) 
					throws DAOException, RemoteException;

		ApplicationEU getNewApplicationEU(Application application, EmissionUnit fpEU)
		throws DAOException, RemoteException;

	ArrayList<TVApplicationDocumentTypeDef> retrieveTvApplicationDocumentTypes()
		throws us.oh.state.epa.stars2.framework.exception.DAOException,
		java.rmi.RemoteException;
	
	ArrayList<ApplicationDocumentTypeDef> retrieveApplicationDocumentTypes()
		throws us.oh.state.epa.stars2.framework.exception.DAOException,
		java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplication(
			java.lang.Integer applicationId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
		
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationSummary(
			java.lang.Integer applicationId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationWithAllEUs(
			java.lang.Integer applicationId,
			boolean staging
			)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationWithAllEUs(
			java.lang.Integer applicationId
			)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationWithAllEUs(
			java.lang.Integer applicationId,
			us.oh.state.epa.stars2.database.dao.Transaction trans
			)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationWithAllEUs(
			java.lang.String applicationNumber)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationWithIncludedEUs(
			java.lang.Integer applicationId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationWithIncludedEUs(
			java.lang.Integer applicationId,
			boolean staging)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationWithIncludedEUs(
			java.lang.String applicationNumber)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationWithBasicEUs(
			java.lang.Integer applicationId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationWithBasicEUs(
			java.lang.Integer applicationId,
			boolean staging)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	/**
	 * Synchronize <code>application</code> with the current view of the
	 * facility inventory.
	 * 
	 * @param application
	 * @throws DAOException
	 * @return true if changes were made to synchronize the application with the
	 *         facility inventory, false otherwise
	 */
	public boolean synchAppWithCurrentFacilityProfile(
			us.oh.state.epa.stars2.database.dbObjects.application.Application application)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Synchronize gateway <code>application</code> with the latest view of the
	 * facility inventory.
	 * 
	 * @param application
	 * @throws DAOException
	 * @return true if changes were made to synchronize the application with the
	 *         facility inventory, false otherwise
	 */
	public void synchGatewayAppWithCurrentFacilityProfile(
			us.oh.state.epa.stars2.database.dbObjects.application.Application application)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieve an application by its application number from the READ ONLY
	 * schema. This should only be used within the portal application to
	 * retrieve applications that have already been submitted and are no longer
	 * in the staging area.
	 * 
	 * @param applicationNumber
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplication(
			java.lang.String applicationNumber)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveApplicationSummary(
			java.lang.String applicationNumber)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void setSubmitterUser(
			us.oh.state.epa.stars2.database.dbObjects.application.Application application)
			throws java.rmi.RemoteException;

	/**
	 * Retrieve a relocation application by its application number from the READ
	 * ONLY schema and provide the facility data for the related facility. This
	 * should only be used within the portal application to retrieve relocation
	 * requests that have already been submitted and are no longer in the
	 * staging area.
	 * 
	 * @param applicationNumber
	 * @param facility
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.Application retrieveRelocationApplication(
			java.lang.String applicationNumber,
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrieveApplicationTypes()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
			
	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU retrieveApplicationEU(
			java.lang.Integer appEUId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU retrieveApplicationEU(
			java.lang.Integer appEUId,
			us.oh.state.epa.stars2.database.dao.Transaction trans,
			boolean staging
			)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU retrieveApplicationEUReadOnly(
			java.lang.Integer appEUId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU[] retrieveApplicationEUs(
			java.lang.Integer appId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieve the application document identified by appDocId.
	 * 
	 * @param appDocId
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocumentRef retrieveApplicationDocument(java.lang.String appTypeCD,
			java.lang.Integer appDocId, boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieve all application-wide documents related to the application
	 * identified by appTypeCD and appId.
	 * 
	 * @param appTypeCD
	 *            application type code.
	 *            
	 * @param appId
	 *            application identifier.
	 *                        
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocumentRef[] retrieveApplicationDocuments(java.lang.String appTypeCD,
			java.lang.Integer appId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.Permit[] retrievePermitsForApplication(
			java.lang.Integer appId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationSearchResult[] retrieveApplicationSearchResults(
			java.lang.String applicationNumber, java.lang.String euId,
			java.lang.String facilityId, java.lang.String facilityName,
			java.lang.String doLaaCd, java.lang.String countyCd,
			java.lang.String applicationType, java.lang.String ptioReasonCd,
			boolean legacyStatePTOFlag, java.lang.String pbrTypeCd,
			java.lang.String permitNumber, java.lang.String companyName,
			boolean unlimitedResults)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU createApplicationEU(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU newAppEu)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a copy of <code>appEU</code> and add it to <code>app</code>.
	 * 
	 * @param appEU
	 *            application EU to be copied.
	 * @param app
	 *            application to which EU will be added.
	 * @return reference to copied EU.
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU createApplicationEUCopy(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU appEU,
			us.oh.state.epa.stars2.database.dbObjects.application.Application app)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Copy application EU data from <code>source</code> to <code>dest</code>.
	 * It is assumed that <code>dest</code> already exists in the database.
	 * 
	 * @param source
	 *            Application EU from which data is to be copied.
	 * @param dest
	 *            Application EU to which data will be copied.
	 * @param app
	 *            Application to which both source and dest should belong.
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU copyApplicationEUData(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU source,
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU dest)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyApplicationEU(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU appEU)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.TVEUOperatingScenario createTVEUOperatingScenario(
			us.oh.state.epa.stars2.database.dbObjects.application.TVEUOperatingScenario scenario)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.TVAltScenarioPteReq createTVAltScenarioPteReq(
			us.oh.state.epa.stars2.database.dbObjects.application.TVAltScenarioPteReq req)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeTVEUOperatingScenario(
			us.oh.state.epa.stars2.database.dbObjects.application.TVEUOperatingScenario scenario)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Delete the TV EU group identified by groupId and all of the data
	 * associated with it.
	 */
	public void removeTVEUGroup(java.lang.Integer groupId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a new application.
	 * 
	 * @param newApp
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.Application createApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application newApp)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a new application.
	 * 
	 * @param newApp
	 * @param trans
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.Application createApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application newApp,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.Application createStagingApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application newApp,
			java.lang.Integer fpId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.Application createApplicationFromGateway(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws java.rmi.RemoteException;

	/**
	 * This method is to be used by methods that need to retrieve application
	 * data residing within a transaction.
	 * 
	 * @param applicationId
	 * @param trans
	 * @return
	 * @throws DAOException
	 */

	public us.oh.state.epa.stars2.database.dbObjects.application.Application createNewApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application newApp)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.Application createNewApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application newApp,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void deleteApplicationDir(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app)
			throws java.io.IOException, java.rmi.RemoteException;

	/**
	 * Set the "validated" flag for <code>app</code> to <code>validated</code>.
	 * This method exists to avoid a full update of all application attributes
	 * when all that is needed is to set the validated flag.
	 * 
	 * @param app
	 *            the application
	 * @param validated
	 *            <code>true</code> or <code>false</code> to indicate whether
	 *            the application is validated.
	 * @return
	 * @throws DAOException
	 */
	public boolean setValidatedFlag(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			boolean validated)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyPbrNoApplicableApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			boolean modifyEUs)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.database.dao.Transaction trans,
			boolean modifyEUs)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean isTradeSecret(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			boolean readOnly, boolean includeAllAttachments)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a copy of <code>origPbr</code> that will contain all the data
	 * specified in <code>origPbr</code>, but will exist as a separate
	 * application with its own application number. The copied application will
	 * be stored in the database, then returned by this method.
	 * 
	 * @param origPbr
	 *            PBRNotification to be copied.
	 * @return copied PBRNotification object.
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.PBRNotification createPBRCopy(
			us.oh.state.epa.stars2.database.dbObjects.application.PBRNotification origPbr)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a copy of <code>app</code> that will contain all the data
	 * specified in <code>app</code>, but will exist as a separate application
	 * with its own application number. The copied application will be stored in
	 * the database, then returned by this method.
	 * 
	 * @param origApp
	 *            Application to be copied.
	 * @param newApplicationClass
	 *            type of class which will be returned. Must be the same as
	 *            origApp's class except for PTIOApplication and TVApplication
	 *            which may copy from one another (e.g. an origApp of class
	 *            PTIOApplication may have newApplication class set to
	 *            TVApplication and vice versa).
	 * @return copied Application object.
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.Application createApplicationCopy(
			us.oh.state.epa.stars2.database.dbObjects.application.Application origApp,
			boolean corrected, java.lang.String correctedReason, boolean amended)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ValidationMessage> validateApplication(
			int applicationID) throws java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ValidationMessage> submitApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			int userId, java.sql.Timestamp dfltReceivedDate)
			throws java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ValidationMessage> submitApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			int userId, java.sql.Timestamp dfltReceivedDate,
			boolean createWorkFlow, java.lang.String permitNumber)
			throws java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ValidationMessage> submitApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			int userId, java.sql.Timestamp dfltReceivedDate,
			boolean createWorkFlow, java.lang.String permitNumber,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws java.rmi.RemoteException;

	public void removeApplicationEU(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU appEU)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeApplicationEU(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU appEU,
			boolean removeDocumentReference)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeApplication(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.String generateApplicationNumber(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.TVEUGroup createTvEuGroup(
			us.oh.state.epa.stars2.database.dbObjects.application.TVEUGroup group)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.TVEUGroup retrieveTvEuGroup(
			java.lang.Integer groupId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.application.TVEUGroup> retrieveTvEuGroups(
			java.lang.Integer appId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void modifyTvEuGroup(
			us.oh.state.epa.stars2.database.dbObjects.application.TVEUGroup group)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocumentRef uploadApplicationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocumentRef doc,
			us.oh.state.epa.stars2.webcommon.UploadedFileInfo publicFile,
			us.oh.state.epa.stars2.webcommon.UploadedFileInfo tsFile,
			java.lang.Integer userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocument uploadApplicationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.webcommon.UploadedFileInfo file,
			java.lang.String description, int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment uploadApplicationAttachment(
			us.oh.state.epa.stars2.webcommon.document.Attachments attachment,
			us.oh.state.epa.stars2.database.dbObjects.application.Application application)
			throws java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.document.Document uploadDocument(
			us.oh.state.epa.stars2.database.dbObjects.document.Document doc,
			java.lang.String filename, java.io.InputStream is)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Load Document objects into docRef to avoid multiple queries for this
	 * information.
	 * 
	 * @param docRef
	 * @param readOnly
	 * @throws DAOException
	 */
	public void loadDocuments(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocumentRef docRef,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Load Document objects into all ApplicationDocumentRef objects associated
	 * with application.
	 * 
	 * @param application
	 * @param readOnly
	 * @throws DAOException
	 */
	public void loadAllDocuments(
			us.oh.state.epa.stars2.database.dbObjects.application.Application application,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public void loadApplicationDetailDocuments(
			us.oh.state.epa.stars2.database.dbObjects.application.Application application,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	/**
	 * Load Document objects into all ApplicationDocumentRef objects associated
	 * with application.
	 * 
	 * @param application
	 * @param readOnly
	 * @throws DAOException
	 */
	public void loadEUDocuments(
			us.oh.state.epa.stars2.database.dbObjects.application.Application application,
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU appEU,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Get list of documents associated with the application.
	 * 
	 * @param app
	 * @return
	 * @throws DAOException
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.document.Document> getPrintableDocumentList(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.database.dbObjects.document.Document facilityDocument,
			boolean readOnly, boolean hideTradeSecret, boolean includeAllAttachments)
			throws java.rmi.RemoteException;

	/**
	 * Get list of documents associated with the application.
	 * 
	 * @param app
	 * @return
	 * @throws DAOException
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.document.Document> getPrintableAttachmentList(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			boolean readOnly, boolean hideTradeSecret, boolean includeAllAttachments)
			throws java.rmi.RemoteException;

	/**
	 * Generate a pdf file containing data from the application and create a
	 * temporary Document object refrencing this file.
	 * 
	 * @param application
	 *            the application to be rendered in a PDF file.
	 * @param hideTradeSecret
	 *            flag indicating whether trade secret information should be
	 *            excluded from the generated file.
	 * @return Document object referencing pdf file.
	 */
	public boolean generateTempApplicationReport(
			us.oh.state.epa.stars2.database.dbObjects.application.Application application,
			boolean hideTradeSecret,
			us.oh.state.epa.stars2.database.dbObjects.document.TmpDocument appDoc, boolean isSubmittedPDFDoc, boolean includeAllAttachments)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a zip file containing application data and all its related
	 * attachments and download its contents.
	 * 
	 * @param app
	 * @throws IOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.document.Document generateTempApplicationZipFile(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.database.dbObjects.document.Document facilityDocument,
			boolean hideTradeSecret, boolean includeAllAttachments, boolean readOnly) throws java.io.FileNotFoundException,
			java.io.IOException, java.rmi.RemoteException;

	/**
	 * Create a zip file containing application data and all its related
	 * attachments and download its contents.
	 * 
	 * @param app
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.document.Document generateTempApplicationAttachmentZipFile(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app, boolean includeAllAttachments, boolean readOnly)
			throws java.io.FileNotFoundException, java.io.IOException,
			java.rmi.RemoteException;

	/**
	 * Create a zip file containing application pdf files.
	 * 
	 * @param app
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.document.Document generateTempApplicationPDFZipFile(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app)
			throws java.io.FileNotFoundException, java.io.IOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationNote createApplicationNote(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationNote applicationNote)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationNote createApplicationNote(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationNote applicationNote,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocumentRef createApplicationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocumentRef doc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.PBRNotificationDocument createPBRNotificationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.PBRNotificationDocument doc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.PBRNotificationDocument modifyPBRNotificationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.PBRNotificationDocument doc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removePBRNotificationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.PBRNotificationDocument doc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.RPCRequestDocument createRPCRequestDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.RPCRequestDocument doc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.application.RPCRequestDocument modifyRPCRequestDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.RPCRequestDocument doc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeRPCRequestDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.RPCRequestDocument doc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyApplicationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocumentRef doc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeApplicationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocumentRef appDoc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Mark all documents associated with the application as temp and then
	 * attempt to remove the documents from the system. This is meant to be
	 * called when deleting an application from the portal since there is no way
	 * for the document clean up daemon to find documents that were once
	 * associated with a deleted application.
	 */
	public void removeApplicationDocuments(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.database.dao.Transaction trans, boolean deleteAttachmentFiles)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeApplicationDocumentDoc(ApplicationDocumentRef appDoc)
			throws DAOException;

	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationNote[] retrieveApplicationNotes(
			int applicationId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyApplicationNote(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationNote applicationNote)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyApplicationNote(
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationNote applicationNote,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieve a "temporary" TVApplicableReq object. This object will not be
	 * stored in the database, but will have a valid, unique tvApplicableReqId
	 * value.
	 * 
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.TVApplicableReq getTempApplicableReq()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a copy of a TVApplicableReq object. The new object will not be
	 * stored in the database, but will have a valid, unique tvApplicableReqId
	 * value.
	 * 
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.TVApplicableReq getApplicableReqCopy(
			us.oh.state.epa.stars2.database.dbObjects.application.TVApplicableReq src)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Return pdf version of application as an InputStream.
	 * 
	 * @param app
	 * @param hideTradeSecret
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocument createApplicationReportDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			java.lang.String userName, boolean hideTradeSecret, boolean isSubmittedPDFDoc, boolean includeAllAttachments)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Return pdf file RO can sign as attestation document.
	 * 
	 * @param app
	 * @param hideTradeSecret
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocument createApplicationAttestationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Generate a pdf file containing data from the application and create a
	 * temporary Document object refrencing this file.
	 * 
	 * @param app
	 * @param hideTradeSecret
	 * @return
	 * @throws DAOException
	 */
	public boolean getApplicationReportAsStream(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			boolean hideTradeSecret,
			us.oh.state.epa.stars2.database.dbObjects.document.TmpDocument appDoc, boolean isSubmittedPDFDoc, boolean includeAllAttachments)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Write pdf version of application to an output stream.
	 * 
	 * @param app
	 * @param hideTradeSecret
	 * @param os
	 * @throws DAOException
	 */
	public boolean writeApplicationReportToStream(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			boolean hideTradeSecret, java.io.OutputStream os, boolean isSubmittedPDFDoc, boolean includeAllAttachments)
			throws java.io.IOException, java.rmi.RemoteException;

	/**
	 * Retrieve list of permits available to be modified by <code>request</code>
	 * . The rpcTypCd field must be set prior to invoking this method.
	 * 
	 * @param request
	 * @return
	 * @throws DAOException
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.permit.Permit> retrievePermitsForRPCRequest(
			java.lang.String rpcTypeCd, java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Return the reason <code>appEU</code> cannot be included in
	 * <code>app</code>.
	 * 
	 * @param app
	 *            the application.
	 * @param appEU
	 *            the application EU.
	 * @return reason why appEU cannot be included in app.
	 * @throws DAOException
	 */
	public java.lang.String retrieveReasonEUNotIncludable(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEU appEU)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.String getCapEmissionsValueFormat()
			throws java.rmi.RemoteException;

	public java.lang.String getCapLbHrEmissionsValueFormat()
			throws java.rmi.RemoteException;

	public java.lang.String getHapEmissionsValueFormat()
			throws java.rmi.RemoteException;

	public java.lang.String getGhgEmissionsValueFormat()
			throws java.rmi.RemoteException;

	public java.lang.String getOthEmissionsValueFormat()
			throws java.rmi.RemoteException;

	/**
	 * Calculate the total and maximum Allowable Ton/Year values for eu and add
	 * them to the EU's list of CAP emissions.
	 */
	public void calculateHaps(
			us.oh.state.epa.stars2.database.dbObjects.application.PTIOApplicationEU eu)
			throws java.rmi.RemoteException;

	public java.lang.String getTvCapEmissionsValueFormat()
			throws java.rmi.RemoteException;

	public java.lang.String getTvHapEmissionsValueFormat()
			throws java.rmi.RemoteException;

	public java.lang.String getEmissionValueAsString(
			java.lang.String pollutantCd, java.lang.String euEmissionTableCd,
			java.lang.Float f) throws java.rmi.RemoteException;

	public float getEmissionValueAsFloat(java.lang.String pollutantCd,
			java.lang.String euEmissionTableCd, java.lang.String value)
			throws java.rmi.RemoteException;

	public BigDecimal calculateTVHaps(
			us.oh.state.epa.stars2.database.dbObjects.application.TVEUOperatingScenario selectedScenario)
			throws java.rmi.RemoteException;

	public java.util.List<java.lang.String> verifySubpartTotals(
			java.util.List<us.oh.state.epa.stars2.database.dbObjects.application.ApplicationEUEmissions> appEUEmissions)
			throws java.rmi.RemoteException;

	public java.util.List<java.lang.String> verifyTVSubpartTotals(
			java.util.List<us.oh.state.epa.stars2.database.dbObjects.application.TVApplicationEUEmissions> appEUEmissions)
			throws java.rmi.RemoteException;

	/**
	 * Find applications associated with permit and invoke the modifyApplication
	 * method for RPC, RPE, and RPR requests. This is needed to reflect changes
	 * to permit EU data.
	 * 
	 * @param permit
	 * @throws DAOException
	 */
	public void updateApplicationAfterPermitUpdate(
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Add attestation document to application
	 * 
	 * @param app
	 * @param attestationDoc
	 * @param trans
	 * @throws DAOException
	 */
	public void addAttestationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.database.dbObjects.application.ApplicationDocument attestationDoc,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeAttestationDocument(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void addSubmissionAttachments(
			us.oh.state.epa.stars2.database.dbObjects.Task task)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.io.IOException, java.io.FileNotFoundException,
			java.rmi.RemoteException;

	public Application retrieveApplicationSummary(Integer applicationID,
			boolean staging) throws DAOException;

	public Application createApplicationCopy(Application origApp,
			boolean corrected, String correctedReason, boolean amended,
			Transaction trans) throws DAOException, RemoteException;

	void changeReqruiedAttachmnetToOption(Integer applicationId,
			Integer appEuId, String typeCd) throws DAOException;
			
	public boolean isPollutantControlledForValidate(ApplicationEU appEu, String pollutantCd);
	
	public boolean isPollutantControlled(ApplicationEU appEu, String pollutantCd) throws DAOException;

	public ValidationMessage[] validatePollutantLimits(
			List<TVEUPollutantLimit> pollutantLimits);

	/**
	 * Removes existing pollutant limits from database for the given Title V
	 * application EU. Inserts any pollutant limits that the EU currently has.
	 * Sets the application validation flag to false.
	 * 
	 * @param tvAppEu
	 *            the EU containing or not containing pollutant limits
	 * @return true if successful
	 * @throws DAOException
	 */
	public boolean modifyPollutantLimits(TVApplicationEU tvAppEu)
			throws DAOException;

	void createFacilityWideRequirement(FacilityWideRequirement facWideReq)
			throws DAOException;

	void removeFacilityWideRequirement(Integer requirementId)
			throws DAOException;

	List<FacilityWideRequirement> retrieveFacilityWideRequirements(
			Integer applicationId) throws DAOException;

	void modifyFacilityWideRequirement(FacilityWideRequirement facWideReq)
			throws DAOException;

	boolean modifyOperationalRestrictions(TVApplicationEU tvAppEu)
			throws DAOException;

	ValidationMessage[] validateOperationalRestrictions(
			List<TVEUOperationalRestriction> operationalRestrictions);

	public List<NSRApplicationLAEREmission> retrieveNSRApplicationLaerEmissions(
			Integer applicationEuId) throws DAOException;

	public void saveNSRApplicationLaerEmissions(
			List<NSRApplicationLAEREmission> laerEmissions,
			Integer applicationEuId) throws DAOException;

	public List<NSRApplicationBACTEmission> retrieveNSRApplicationBactEmissions(
			Integer applicationEuId) throws DAOException;

	public void saveNSRApplicationBactEmissions(
			List<NSRApplicationBACTEmission> bactEmissions,
			Integer applicationEuId) throws DAOException;

	void verifyNSRAppRequiredAttachments(PTIOApplication ptioApp) throws Exception;

	void verifyNSRAppEURequiredAttachments(PTIOApplication ptioApp,
			PTIOApplicationEU ptioAppEU) throws Exception;

	void verifyTVAppRequiredAttachments(TVApplication tvApp) throws Exception;

	void verifyTVAppEURequiredAttachments(TVApplication tvApp, TVApplicationEU tvAppEU)
			throws Exception;

	void verifyTVAppEURequiredAttachments(Transaction trans, TVApplication tvApp,
			TVApplicationEU tvAppEU) throws Exception;

	void verifyTVAppRequiredAttachments(Transaction trans, TVApplication tvApp)
			throws Exception;

	void verifyNSRAppEURequiredAttachments(Transaction trans, PTIOApplication ptioApp,
			PTIOApplicationEU ptioAppEU) throws Exception;

	void verifyNSRAppRequiredAttachments(Transaction trans, PTIOApplication ptioApp)
			throws Exception;
	
	public List<ApplicationEUFugitiveLeaks> retrieveApplicationEUFugitiveLeaks(Integer appEuId) 
			throws DAOException;
	
	public void saveApplicationEUFugitiveLeaks(List<ApplicationEUFugitiveLeaks> applicationEUFugitiveLeaks,Integer appEuId) 
			throws DAOException;
	public java.lang.String getCmxEmissionsMaterialUsedValueFormat();
	
	public ApplicationDocumentTypeDef retrieveApplicationDocTypeDef(String applicationDocumentTypeCD)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	ApplicationDocumentTypeDef retrieveTVApplicationDocTypeDef(
			String applicationDocumentTypeCD) throws DAOException, RemoteException;

	public void updateNSRPurposes(Application app) throws DAOException;
	
	public void checkAndRemoveCAMPlan(Application app, ApplicationEU appEU) throws DAOException;
	
	public void checkAndRemoveCAMPlan(Transaction trans, TVApplication TVapp);

	String getEmissionBigDecimalValueAsString(String pollutantCd,
			String euEmissionTableCd, BigDecimal co2e) throws java.rmi.RemoteException;

	BigDecimal getEmissionValueAsBigDecimal(String pollutantCd,
			String euEmissionTableCd, String pteTonsYr) throws java.rmi.RemoteException;
	
	public void checkAndAddCAMPlan(Application app, ApplicationEU appEU) throws DAOException;

	public ApplicationDocumentRef[] retrieveApplicationEUDocuments(java.lang.String appTypeCD, Integer appEuId)
			throws DAOException;
	
	public void zipApplicationFiles(Application app,
			Document facilityDocument, ZipOutputStream zos,
			boolean hideTradeSecret, boolean includeAllAttachments,
			boolean readOnly) throws IOException;
	
	boolean checkApplicationExistsInReadOnlySchema(Integer applicationId)
			throws DAOException;
	
	/**
	 * @param tradeSecretDocId
	 * @return ApplicationDocument
	 * @throws DAOException
	 */
	ApplicationDocument retrieveApplicationDocumentByTradeSecrectDocId(Integer tradeSecretDocId) throws DAOException;
	
	/**
	 * @param applicationId
	 * @return Submitted date of this application. Null if the application is not submitted.
	 * @throws DAOException
	 */
	Timestamp retrieveApplicationSubmittedDate(Integer applicationId) throws DAOException;
	
	
	/**
	 * 
	 * @param applicationId
	 * @return Application
	 * @throws DAOException
	 */
	Application retrieveBasicApplicationById(Integer applicationId) throws DAOException;
	
	/**
	 * 
	 * @param applicationNbr
	 * @return Application
	 * @throws DAOException
	 */
	Application retrieveBasicApplicationByNbr(String applicationNbr) throws DAOException;
}

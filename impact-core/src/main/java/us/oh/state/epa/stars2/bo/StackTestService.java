/*
 * Generated by XDoclet - Do not edit!
 */
package us.oh.state.epa.stars2.bo;

import java.rmi.RemoteException;
import java.util.List;

import us.oh.state.epa.stars2.database.dao.Transaction;
import us.oh.state.epa.stars2.database.dbObjects.ValidationMessage;
import us.oh.state.epa.stars2.database.dbObjects.ceta.StAttachment;
import us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest;
import us.oh.state.epa.stars2.database.dbObjects.facility.Facility;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.Note;
import us.oh.state.epa.stars2.framework.exception.DAOException;
import us.oh.state.epa.stars2.webcommon.ServiceFactoryException;

/**
 * Service interface for StackTestEJB. 
 */
public interface StackTestService

{

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest retrieveStackTestRowOnly(
			int stackTestId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest retrieveStackTest(
			int stackTestId, boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ceta.StackTestedPollutant> retrieveStackTestPollOnly(
			java.lang.Integer stackTestId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void initializeStackTestPollInfo(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest stackTest)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest createStackTest(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest stackTest,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest createMigratedStackTest(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest stackTest,
			us.oh.state.epa.stars2.database.dbObjects.ceta.FacilityHistory fh)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void modifyStackTest(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest stackTest,
			java.util.List<us.oh.state.epa.stars2.database.dbObjects.ceta.TestVisitDate> oldDates,
			java.lang.Integer userId,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void deleteStackTest(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest stackTest,
			boolean readOnly, boolean deleteAttachmentFiles)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeStAttachment(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StAttachment doc,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest[] retrieveStackTestsBySearch(
			java.lang.String facilityId, java.lang.Integer stackTestId,
			java.lang.Integer fceId, java.lang.String facilityName,
			java.lang.String doLaaCd, java.lang.String countyCd,
			java.lang.String permitClassCd, java.lang.String facilityTypeCd, 
			java.lang.String dateBy,
			java.sql.Timestamp beginDate,
			java.sql.Timestamp endDate, boolean failedPolls,
			java.lang.Integer reviewer, java.lang.String stackTestMethodCd,
			java.lang.String emissionTestState, java.lang.String inspId,
			java.lang.String stckId, java.lang.String cmpId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest[] searchStackTests(
			java.lang.String facilityId, java.sql.Timestamp visitDate)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest[] searchStackTests(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest[] searchStackTests(
			java.lang.String facilityId, java.lang.String emissionTestState)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest[] retrieveStacktestByFce(
			java.lang.Integer fceId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ceta.StAttachment> retrieveStAttachments(
			java.lang.Integer stackTestId,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest[] retrieveStacktestsUnassigned(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void saveReassign(java.lang.Integer fceId,
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest[] tests)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.HashMap<java.lang.String, us.oh.state.epa.stars2.database.dbObjects.ceta.StackTestMethodPollutant[]> retrieveAllMethodPolls()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void modifyStAttachment(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StAttachment doc,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a new row in the Attachment table.
	 * 
	 * @param st
	 * @param attachment
	 * @param fileStream
	 * @return Attachment
	 */
	public us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment createStAttachment(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest st,
			us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment attachment,
			java.io.InputStream fileStream,
			us.oh.state.epa.stars2.database.dbObjects.attachments.Attachment tsAttachment,
			java.io.InputStream tsInputStream,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			us.oh.state.epa.stars2.framework.exception.ValidationException,
			java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ceta.StackTestedPollutant> newAfsStackTests()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void createInspectionAssociation(java.lang.Integer stackTestId,
			java.lang.String InspectionId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.Integer afsLockStackTestPollutant(
			java.lang.String scscId,
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTestedPollutant stp)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.Integer afsSetDateStackTestPollutant(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTestedPollutant stp)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ceta.StackTestedPollutant> retrieveTestPollutant(
			java.lang.String scscId, java.lang.String afsId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.sql.Timestamp retrieveLastStackTestDate(
			java.lang.String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.sql.Timestamp retrieveLastStackTestDate(
			java.lang.Integer stackTestId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a zip file containing the four AFS 9.x files.
	 * 
	 * @param String
	 * @param String
	 * @param String
	 * @param String
	 * @param String
	 * @param String
	 * @return Document
	 * @throws DAOException
	 */
	public void generateTempAttachmentZipFile(
			java.lang.String fileNameComponent, java.lang.String file91Nm,
			java.lang.String file92Nm, java.lang.String file93Nm,
			java.lang.String file94Nm, java.lang.String zNm)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest[] retrieveStackTestsForValidate(
			java.lang.String facilityId, java.lang.String stackTestMethodCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Get list of documents associated with the Stack Test.
	 * 
	 * @param EmissionsReport
	 * @return List<Document>
	 * @throws DAOException
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.document.Document> getPrintableAttachmentList(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest test,
			boolean readOnly, Boolean hideTradeSecret)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Get list of documents associated with the TV/SMTV emission report.
	 * 
	 * @param
	 * @return
	 * @throws DAOException
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.document.Document> getPrintableDocumentList(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dbObjects.document.TmpDocument facilityDoc,
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest test,
			java.lang.String user, boolean readOnly, Boolean hideTradeSecret)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Create a zip file containing stack test data and all its related
	 * attachments and download its contents.
	 * 
	 * @param StackTest
	 * @param facilityId
	 * @param TmpDocument
	 * @param TmpDocument
	 * @return Document
	 */

	public us.oh.state.epa.stars2.database.dbObjects.document.Document generateTempAttachmentZipFile(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest test,
			java.lang.String facilityId,
			us.oh.state.epa.stars2.database.dbObjects.document.TmpDocument facilityPdf,
			us.oh.state.epa.stars2.database.dbObjects.document.TmpDocument emissionsTestPdf,
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTestDocument submittedTestDoc, 
			boolean readOnly, Boolean hideTradeSecret)
			throws java.rmi.RemoteException;

	public Note[] retrieveStackTestNotes(int stackTestId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTestNote createStackTestNote(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTestNote stackTestNote)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	boolean modifyStackTestNote(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTestNote stackTestNote)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Synchronize <code>stackTest</code> with the current view of the facility
	 * profile.
	 * 
	 * @param stackTest
	 * @throws DAOException
	 * @return true if changes were made to synchronize the stackTest with the
	 *         facility inventory, false otherwise
	 */
	public boolean synchStackTestWithCurrentFacilityProfile(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest stackTest)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public StackTest retrieveBasicStackTestWithPollutants(Integer stackTestId,
			Facility facility) throws DAOException;
	
	public void addSubmissionAttachments(
			us.oh.state.epa.stars2.database.dbObjects.Task task)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.io.IOException, java.io.FileNotFoundException,
			java.rmi.RemoteException;
	
	public StackTest createStackTestFromGateway(
			StackTest st,
			Facility facility, 
			Transaction trans) throws RemoteException;
	
	public StAttachment createStackTestAttachmentFromPortal(StackTest stackTest, StAttachment attachment,
			Transaction trans) throws DAOException;
	
	public us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest createStagingStackTest(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest newStackTest,
			java.lang.Integer fpId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	/**
	 * Set the "validated" flag for <code>st</code> to <code>validated</code>.
	 * This method exists to avoid a full update of all stack test attributes
	 * when all that is needed is to set the validated flag.
	 * 
	 * @param st
	 *            the stack test
	 * @param validated
	 *            <code>true</code> or <code>false</code> to indicate whether
	 *            the stack test is validated.
	 * @return
	 * @throws DAOException
	 */
	public boolean setValidatedFlag(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest st,
			boolean validated,
			boolean readOnly)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public void assignStackTest(
			us.oh.state.epa.stars2.database.dbObjects.ceta.StackTest stackTest,
			java.lang.Integer userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public List<ValidationMessage> validateStackTest(int stacktestID, ValidationMessage vm,
			boolean useReadOnlyDB) throws RemoteException,
			ServiceFactoryException;
	
	/**
	 * @param tradeSecretDocId
	 * @return StAttachment
	 * @throws DAOException
	 */
	StAttachment retrieveStTradeSecretAttachmentInfoById(Integer tradeSecretDocId) throws DAOException;
	

}

package us.oh.state.epa.stars2.database.dbObjects.emissionReport;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import us.oh.state.epa.common.util.Logger;
import us.oh.state.epa.stars2.database.dao.AbstractDAO;
import us.oh.state.epa.stars2.database.dbObjects.BaseDB;
import us.oh.state.epa.stars2.webcommon.reports.EmissionRow;

public class FireRow extends BaseDB {
    /*
     * Note that initially, this table is generated by starting with US EPA WEB
     * FIRE in an Excel spreadsheet. The attribues factor, formula, unit,
     * measure, material, notes, and qualiity are also duplicated into new
     * columns (attributes) with attribute name stating with "orig".
     * 
     * STARS2 only operates upon the first twelve attributs,
     * facttorId-->origin.
     * 
     * STARS2 validates pollutantCd, unit, measure, material and action to
     * ensure they are valid references. STARS2 will also validate factor and
     * formula to ensure the values have meaning.
     * 
     * If AQD is "improving an existing row, they may change any of the
     * attributes factor-->quality. If some of these attribue values are
     * illegal, AQD will change them.
     * 
     * Once the first live import is done, none of these fields can be modified
     * (except notes) without creating a new FIRE row (new factorId value). The
     * original row should then be deprecated and the new row will have a create
     * date matching the deprecate date.
     */
    
    // allow for Ohio EPA local Fire entires and allow
    // for AQD revising US EPA entries. Table key.
    private String factorId; 
    private transient boolean notActive;  // flag indicating this row is deprecated/not active (not in database)
    private String sccId; // reference into SCC table. Cannot be null;
    private String pollutantCd; // reference into NEI pollutant table.
    private String factor;
    private String formula;
    private String unit; // reference into rp_unit_def table
    private String measure; // reference into rp_unit_def table
    private String material; // reference into rp_material_def
    private String action; // reference into FIRE action table
    private String notes;
    private String quality;
    private String origin; // describes whether US EPA, OHIO local, etc.

    // The remaining fields are for documentation and not used by STARS2.
    // The only place they can be seen is when viewing the table with admin
    // privledge.
    private String cas; // documentation field in US EPA FIRE
    private String pollutant; // documentation field in US EPA FIRE
    private String pollutantID; // documentation field in US EPA FIRE
    private String origFactor; // field in US EPA FIRE
    private String origFormula; // field in US EPA FIRE
    private String origUnit; // field in US EPA FIRE
    private String origMeasure; // field in US EPA FIRE
    private String origMaterial; // field in US EPA FIRE
    private String origAction; // field in US EPA FIRE
    private String ap42Section; // field in US EPA FIRE
    private String refDesc; // field in US EPA FIRE
    private String origNotes; // field in US EPA FIRE
    private String origQuality; // field in US EPA FIRE
    private Integer created;
    private Integer deprecated;

    public FireRow() {
        super();
        notActive = false;
    }
    
    public static ArrayList<FireRow> computeFireChoices(EmissionRow row,
            String materialCd, FireRow[] fireRows, int yr) {
        ArrayList<FireRow> rowChoiceTable = new ArrayList<FireRow>();
        for(FireRow r :  fireRows){
            if(r.isFactorFormula() && null != r.getPollutantCd() &&
                    r.getPollutantCd().equals(row.getPollutantCd()) &&
                    materialCd != null && materialCd.equals(r.getMaterial())) {
            	
            	if(row!=null && r!=null){
            		if(row.getFireRef()!=null){
	            		if(row.getFireRef().equalsIgnoreCase(r.getFactorId())){	            		
	            			r.setSelected(true);          		
	            		}
            		}
            	}
            	
                if(r.isActive(yr)) {
                    // build list of fire rows with pollutant               
                    r.setNotActive(false);                    
                    rowChoiceTable.add(r);
                } else if(row.getFireRef() != null && row.getFireRef().equals(r.getFactorId())) {
                    r.setNotActive(true);                    
                    rowChoiceTable.add(r);
                }
            }
        }
        return rowChoiceTable;
    }
    
    // protect against bad data.
    public static String getFireId(FireRow row) {
        String ret = null;
        if(row.isFactorFormula()) { // non null if factor or formula
            ret = row.factorId;
        }
        return ret; 
    }
    
    public final boolean isActive(int year) {
        boolean ret = false;
        
        if((null == created || created.intValue() <= year) &&
            (null == deprecated || deprecated.intValue() > year)){
            ret = true;
        }
        
        return ret;
    }
    
    public final boolean isFactorFormula() {
        return (null != factor || null != formula);
    }
    
    // Return null if formula else return factor
    // Must first call isFactorFormula() to determine
    // the row defines one or the other.
    public final String getFactorFormula() {
        String ret = null;
        // Is a factor if not null and not the word "formula"
        if(factor != null && !factor.trim().equalsIgnoreCase("formula")){
            ret = factor;
        }
        return ret;
    }
    
    public String nonCriticalequal(FireRow row, int year) {
        StringBuffer sb = new StringBuffer(100);
        if(factor != null && factor.length() == 0) {
            factor = null;
        }
        if(row.factor!= null && row.factor.length() == 0) {
            row.factor = null;
        }
        if(factor == null ^ row.factor == null) {
            sb.append("factor, ");
        }
        if(factor != null && row.factor != null) {
            double f1 = EmissionsReport.convertStringToNum(factor);
            double f2 = EmissionsReport.convertStringToNum(row.factor);
            if(f1 != f2) {
                sb.append("factor, ");
            }
        }
        if(!compareStrings(formula, row.formula)) {
            sb.append("formula, ");
        }
        if(!compareStrings(notes, row.notes)) {
            sb.append("notes, ");
        }
        if(!compareStrings(quality, row.quality)) {
            sb.append("quality, ");
        }
        if(!compareStrings(origin, row.origin)) {
            sb.append("orgin, ");
        }
        if(!compareStrings(cas, row.cas)) {
            sb.append("cas, ");
        }
        if(!compareStrings(pollutant, row.pollutant)) {
            sb.append("pollutant, ");
        }
        if(!compareStrings(pollutantID, row.pollutantID)) {
            sb.append("pollutantID, ");
        }
        if(!compareStrings(origFactor, row.origFactor)) {
            sb.append("origFactor, ");
        }
        if(!compareStrings(origFormula, row.origFormula)) {
            sb.append("origFormula, ");
        }
        if(!compareStrings(origUnit, row.origUnit)) {
            sb.append("origUnit, ");
        }
        if(!compareStrings(origMeasure, row.origMeasure)) {
            sb.append("origMeasure, ");
        }
        if(!compareStrings(origMaterial, row.origMaterial)) {
            sb.append("origMaterial, ");
        }
        if(!compareStrings(origAction, row.origAction)) {
            sb.append("origAction, ");
        }
        if(!compareStrings(ap42Section, row.ap42Section)) {
            sb.append("ap4Section, ");
        }
        if(!compareStrings(refDesc, row.refDesc)) {
            sb.append("refDesc, ");
        }
        if(!compareStrings(origNotes, row.origNotes)) {
            sb.append("origNotes, ");
        }
        if(!compareStrings(origQuality, row.origQuality)) {
            sb.append("origQuality, ");
        }
        if(deprecated != null && deprecated.equals(year) &&
                row.deprecated == null) {
            // current row was marked decrecated this year and
            // replacement row is not marked deprecated.
            return sb.toString();
        }
        if(!compareIntegers(deprecated, row.deprecated)) {
            sb.append("deprecated, ");
        }
        return sb.toString();
    }
    
    private static boolean compareIntegers(Integer i1, Integer i2) {
        if(i1 == null && i2 == null) {
            return true;
        }
        if(i1 == null ^ i2 == null) {
            return false;
        }
        return i1.equals(i2);
    }
    
    private static boolean compareStrings(String stringOne, String stringTwo) {
        boolean ret = false;
        if(stringOne != null) {
            stringOne = stringOne.trim();
        }
        if(stringTwo != null) {
            stringTwo = stringTwo.trim();
        }
        if (stringOne == null && stringTwo == null) {
            ret = true;
        } else if (stringTwo != null && (stringOne == null && stringTwo.equals(""))) {
            ret = true;
        } else if (stringOne != null && (stringOne.equals("") && stringTwo == null)) {
            ret = true;
        } else if (stringOne != null && stringOne.equals(stringTwo)) {
            ret = true;
        }
        return ret;
    }

    public final String getAction() {
        return action;
    }

    public final void setAction(String action) {
        this.action = action;
    }

    public final String getAp42Section() {
        return ap42Section;
    }

    public final void setAp42Section(String ap42Section) {
        this.ap42Section = ap42Section;
    }

    public final String getCas() {
        return cas;
    }

    public final void setCas(String cas) {
        this.cas = cas;
    }

    public final String getFactor() {
        return factor;
    }

    public final void setFactor(String factor) {
        this.factor = factor;
    }

    public final String getFactorId() {
        return factorId;
    }

    public final void setFactorId(String factorId) {
        this.factorId = factorId;
    }

    public final String getFormula() {
        return formula;
    }

    public final void setFormula(String formula) {
        this.formula = formula;
    }

    public final String getMaterial() {
        return material;
    }

    public final void setMaterial(String material) {
        this.material = material;
    }

    public final String getMeasure() {
        return measure;
    }

    public final void setMeasure(String measure) {
        this.measure = measure;
    }

    public final String getNotes() {
        return notes;
    }

    public final void setNotes(String notes) {
        this.notes = notes;
    }

    public final String getOrigAction() {
        return origAction;
    }

    public final void setOrigAction(String origAction) {
        this.origAction = origAction;
    }

    public final String getOrigFactor() {
        return origFactor;
    }

    public final void setOrigFactor(String origFactor) {
        this.origFactor = origFactor;
    }

    public final String getOrigFormula() {
        return origFormula;
    }

    public final void setOrigFormula(String origFormula) {
        this.origFormula = origFormula;
    }

    public final String getOrigMaterial() {
        return origMaterial;
    }

    public final void setOrigMaterial(String origMaterial) {
        this.origMaterial = origMaterial;
    }

    public final String getOrigMeasure() {
        return origMeasure;
    }

    public final void setOrigMeasure(String origMeasure) {
        this.origMeasure = origMeasure;
    }

    public final String getOrigNotes() {
        return origNotes;
    }

    public final void setOrigNotes(String origNotes) {
        this.origNotes = origNotes;
    }

    public final String getOrigQuality() {
        return origQuality;
    }

    public final void setOrigQuality(String origQuality) {
        this.origQuality = origQuality;
    }

    public final String getOrigUnit() {
        return origUnit;
    }

    public final void setOrigUnit(String origUnit) {
        this.origUnit = origUnit;
    }

    public final String getPollutant() {
        return pollutant;
    }

    public final void setPollutant(String pollutant) {
        this.pollutant = pollutant;
    }

    public final String getPollutantCd() {
        return pollutantCd;
    }

    public final void setPollutantCd(String pollutantCd) {
        this.pollutantCd = pollutantCd;
    }

    public final String getQuality() {
        return quality;
    }

    public final void setQuality(String quality) {
        this.quality = quality;
    }

    public final String getRefDesc() {
        return refDesc;
    }

    public final void setRefDesc(String refDesc) {
        this.refDesc = refDesc;
    }

    public final String getSccId() {
        return sccId;
    }

    public final void setSccId(String sccId) {
        this.sccId = sccId;
    }

    public final String getUnit() {
        return unit;
    }

    public final void setUnit(String unit) {
        this.unit = unit;
    }

    public final String getPollutantID() {
        return pollutantID;
    }

    public final void setPollutantID(String pollutantID) {
        this.pollutantID = pollutantID;
    }

    public final String getOrigin() {
        return origin;
    }

    public final void setOrigin(String origin) {
        this.origin = origin;
    }

    public final void populate(ResultSet rs) {
        try {
            setFactorId(rs.getString("fire_id"));
            setSccId(rs.getString("scc_id"));
            setPollutantCd(rs.getString("pollutant_cd"));
            setFactor(rs.getString("factor"));
            setFormula(rs.getString("formula"));
            setUnit(rs.getString("emissions_unit_cd"));
            setMeasure(rs.getString("material_unit_cd"));
            setMaterial(rs.getString("material_cd"));
            setAction(rs.getString("action_cd"));
            setNotes(rs.getString("notes"));
            setQuality(rs.getString("quality"));
            setOrigin(rs.getString("origin"));
            setCas(rs.getString("cas"));
            setPollutant(rs.getString("fire_pollutant"));
            setPollutantID(rs.getString("fire_pollutant_id"));
            setOrigFactor(rs.getString("orig_factor"));
            setOrigFormula(rs.getString("orig_formula"));
            setOrigUnit(rs.getString("orig_emissions_unit_cd"));
            setOrigMeasure(rs.getString("orig_material_unit"));
            setOrigMaterial(rs.getString("orig_material"));
            setOrigAction(rs.getString("orig_action_cd"));
            setAp42Section(rs.getString("ap42_section"));
            setRefDesc(rs.getString("ref_desc"));
            setOrigNotes(rs.getString("orig_notes"));
            setOrigQuality(rs.getString("orig_quality"));
            setDeprecated(AbstractDAO.getInteger(rs, "deprecated_year"));
            setCreated(AbstractDAO.getInteger(rs, "created"));
            setLastModified(AbstractDAO.getInteger(rs, "last_modified"));
        } catch (SQLException sqle) {
            logger.warn(sqle.getMessage());
        }
    }

    @Override
    public int hashCode() {
        final int PRIME = 31;
        int result = super.hashCode();
        result = PRIME * result + ((action == null) ? 0 : action.hashCode());
        result = PRIME * result
                + ((ap42Section == null) ? 0 : ap42Section.hashCode());
        result = PRIME * result + ((cas == null) ? 0 : cas.hashCode());
        result = PRIME * result + ((created == null) ? 0 : created.hashCode());
        result = PRIME * result
                + ((deprecated == null) ? 0 : deprecated.hashCode());
        result = PRIME * result + ((factor == null) ? 0 : factor.hashCode());
        result = PRIME * result
                + ((factorId == null) ? 0 : factorId.hashCode());
        result = PRIME * result + ((formula == null) ? 0 : formula.hashCode());
        result = PRIME * result
                + ((material == null) ? 0 : material.hashCode());
        result = PRIME * result + ((measure == null) ? 0 : measure.hashCode());
        result = PRIME * result + ((notes == null) ? 0 : notes.hashCode());
        result = PRIME * result
                + ((origAction == null) ? 0 : origAction.hashCode());
        result = PRIME * result
                + ((origFactor == null) ? 0 : origFactor.hashCode());
        result = PRIME * result
                + ((origFormula == null) ? 0 : origFormula.hashCode());
        result = PRIME * result
                + ((origMaterial == null) ? 0 : origMaterial.hashCode());
        result = PRIME * result
                + ((origMeasure == null) ? 0 : origMeasure.hashCode());
        result = PRIME * result
                + ((origNotes == null) ? 0 : origNotes.hashCode());
        result = PRIME * result
                + ((origQuality == null) ? 0 : origQuality.hashCode());
        result = PRIME * result
                + ((origUnit == null) ? 0 : origUnit.hashCode());
        result = PRIME * result + ((origin == null) ? 0 : origin.hashCode());
        result = PRIME * result
                + ((pollutant == null) ? 0 : pollutant.hashCode());
        result = PRIME * result
                + ((pollutantCd == null) ? 0 : pollutantCd.hashCode());
        result = PRIME * result
                + ((pollutantID == null) ? 0 : pollutantID.hashCode());
        result = PRIME * result + ((quality == null) ? 0 : quality.hashCode());
        result = PRIME * result + ((refDesc == null) ? 0 : refDesc.hashCode());
        result = PRIME * result + ((sccId == null) ? 0 : sccId.hashCode());
        result = PRIME * result + ((unit == null) ? 0 : unit.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (getClass() != obj.getClass())
            return false;
        final FireRow other = (FireRow) obj;
        if (action == null) {
            if (other.action != null)
                return false;
        } else if (!action.equals(other.action))
            return false;
        if (ap42Section == null) {
            if (other.ap42Section != null)
                return false;
        } else if (!ap42Section.equals(other.ap42Section))
            return false;
        if (cas == null) {
            if (other.cas != null)
                return false;
        } else if (!cas.equals(other.cas))
            return false;
        if (created == null) {
            if (other.created != null)
                return false;
        } else if (!created.equals(other.created))
            return false;
        if (deprecated == null) {
            if (other.deprecated != null)
                return false;
        } else if (!deprecated.equals(other.deprecated))
            return false;
        if (factor == null) {
            if (other.factor != null)
                return false;
        } else if (!factor.equals(other.factor))
            return false;
        if (factorId == null) {
            if (other.factorId != null)
                return false;
        } else if (!factorId.equals(other.factorId))
            return false;
        if (formula == null) {
            if (other.formula != null)
                return false;
        } else if (!formula.equals(other.formula))
            return false;
        if (material == null) {
            if (other.material != null)
                return false;
        } else if (!material.equals(other.material))
            return false;
        if (measure == null) {
            if (other.measure != null)
                return false;
        } else if (!measure.equals(other.measure))
            return false;
        if (notes == null) {
            if (other.notes != null)
                return false;
        } else if (!notes.equals(other.notes))
            return false;
        if (origAction == null) {
            if (other.origAction != null)
                return false;
        } else if (!origAction.equals(other.origAction))
            return false;
        if (origFactor == null) {
            if (other.origFactor != null)
                return false;
        } else if (!origFactor.equals(other.origFactor))
            return false;
        if (origFormula == null) {
            if (other.origFormula != null)
                return false;
        } else if (!origFormula.equals(other.origFormula))
            return false;
        if (origMaterial == null) {
            if (other.origMaterial != null)
                return false;
        } else if (!origMaterial.equals(other.origMaterial))
            return false;
        if (origMeasure == null) {
            if (other.origMeasure != null)
                return false;
        } else if (!origMeasure.equals(other.origMeasure))
            return false;
        if (origNotes == null) {
            if (other.origNotes != null)
                return false;
        } else if (!origNotes.equals(other.origNotes))
            return false;
        if (origQuality == null) {
            if (other.origQuality != null)
                return false;
        } else if (!origQuality.equals(other.origQuality))
            return false;
        if (origUnit == null) {
            if (other.origUnit != null)
                return false;
        } else if (!origUnit.equals(other.origUnit))
            return false;
        if (origin == null) {
            if (other.origin != null)
                return false;
        } else if (!origin.equals(other.origin))
            return false;
        if (pollutant == null) {
            if (other.pollutant != null)
                return false;
        } else if (!pollutant.equals(other.pollutant))
            return false;
        if (pollutantCd == null) {
            if (other.pollutantCd != null)
                return false;
        } else if (!pollutantCd.equals(other.pollutantCd))
            return false;
        if (pollutantID == null) {
            if (other.pollutantID != null)
                return false;
        } else if (!pollutantID.equals(other.pollutantID))
            return false;
        if (quality == null) {
            if (other.quality != null)
                return false;
        } else if (!quality.equals(other.quality))
            return false;
        if (refDesc == null) {
            if (other.refDesc != null)
                return false;
        } else if (!refDesc.equals(other.refDesc))
            return false;
        if (sccId == null) {
            if (other.sccId != null)
                return false;
        } else if (!sccId.equals(other.sccId))
            return false;
        if (unit == null) {
            if (other.unit != null)
                return false;
        } else if (!unit.equals(other.unit))
            return false;
        return true;
    }

    public Integer getCreated() {
        return created;
    }

    public void setCreated(Integer created) {
        this.created = created;
    }

    public Integer getDeprecated() {
        return deprecated;
    }

    public void setDeprecated(Integer deprecated) {
        this.deprecated = deprecated;
    }

    public boolean isNotActive() {
        return notActive;
    }

    public void setNotActive(boolean notActive) {
        this.notActive = notActive;
    }
}

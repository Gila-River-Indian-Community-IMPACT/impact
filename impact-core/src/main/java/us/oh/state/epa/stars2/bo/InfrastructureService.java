/*
 * Generated by XDoclet - Do not edit!
 */
package us.oh.state.epa.stars2.bo;

import java.util.List;

import us.oh.state.epa.stars2.database.dbObjects.document.Document;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.DaemonInfo;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.ForeignKeyReference;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.PredicateDef;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.Shape;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef;
import us.oh.state.epa.stars2.database.dbObjects.permit.TimeSheetRow;
import us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEmissionsReport;
import us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCNonChargePollutant;
import us.oh.state.epa.stars2.def.GeoPolygonDef;
import us.oh.state.epa.stars2.framework.exception.DAOException;

/**
 * Service interface for InfrastructureEJB.
 */
public interface InfrastructureService {

	public boolean addressIntersectsShape(Integer addressId, Integer shapeId) throws DAOException;
	
	public TimeSheetRow[] retrieveTimeSheetEntries(Integer userId) throws DAOException;

	public GeoPolygonDef[] retrieveGeoPolygonDefs()
			throws DAOException;
	
	public PredicateDef[] retrievePredicates() throws DAOException;


	public java.util.LinkedHashMap<java.lang.String, java.lang.Integer> retrieveFpIdAndNm()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SccLevel[] retrieveSccLevelCodes(
			int level, java.lang.String level1Desc,java.lang.String level2Desc,java.lang.String level3Desc,java.lang.String level4Desc,java.lang.String sccId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method is for ITS to add users to Stars2. The only things that are
	 * required are a numeric userId, which must match ITS's, and the loginName,
	 * which doesn't have to match ITS's, but probably should.
	 */
	public boolean createUser(int userId, java.lang.String loginName,
			int[] roles)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.framework.userAuth.UseCase createUseCase(
			us.oh.state.epa.stars2.framework.userAuth.UseCase newUseCase)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.framework.userAuth.UseCase[] retrieveAllUseCases()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.LinkedHashMap<java.lang.String, us.oh.state.epa.stars2.framework.userAuth.UseCase> retrieveUseCases(
			int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.framework.userAuth.UseCase[] retrieveUseCases(
			java.lang.Integer securityGroupId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef getSimpleDefMetaData(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef simpleDef)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.UserDefBase checkAuthentication(
			java.lang.String userName, java.lang.String password)
			throws java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.UserDefBase checkUserExists(
			java.lang.String userName) throws java.rmi.RemoteException;
	
	public boolean checkUserPresent(
			java.lang.String userName) throws java.rmi.RemoteException;

	public boolean createInternalUser(java.lang.String userName)
			throws java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.UserDefBase checkAuthentication(
			int userId, java.lang.String password)
			throws java.rmi.RemoteException;

	public boolean modifyUser(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.UserDef userDef)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.framework.userAuth.UseCase retrieveUseCase(
			java.lang.String useCase)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.UserDef retrieveUserDef(
			java.lang.Integer userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SecurityGroup retrieveSecurityGroup(
			java.lang.Integer securityGroupId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieve SecurityGroups for given application type.
	 * 
	 * @param String
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SecurityGroup[] retrieveSecurityGroups()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves County associated with given countyId
	 * 
	 * @param countyId
	 * @return County associated with given countyId
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.CountyDef retrieveCounty(
			java.lang.String countyCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves NewspaperDef associated with given countyId
	 * 
	 * @param countyId
	 * @return NewspaperDef associated with given countyId
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.NewspaperDef retrieveNewspaper(
			java.lang.String countyCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	/**
	 * Retrieves all defined Counties
	 * 
	 * @return CountyDef[] an array of all defined counties
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.CountyDef[] retrieveCounties()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
//	/**
//	 * Retrieves all defined Cities
//	 * 
//	 * @return CityDef[] an array of all defined cities
//	 */
//	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.CityDef[] retrieveCities()
//			throws us.oh.state.epa.stars2.framework.exception.DAOException,
//			java.rmi.RemoteException;

	/**
	 * Retrieves All defined States
	 * 
	 * @return StateDef[] an array of all defined states
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.StateDef[] retrieveStates()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves All defined Districts
	 * 
	 * @return DistrictDef[] an array of all defined districts
	 */
	public us.wy.state.deq.impact.database.dbObjects.infrastructure.DistrictDef[] retrieveDistricts()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns an array of all countries contained in persistent storage. In the
	 * event of a data access failure, the exception is logged and then rethrown
	 * as a <tt>DAOException</tt>.
	 * 
	 * @return CountryDef[] An array of CountryDef objects.
	 * @throws DAOException
	 *             Data retrieval failed.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.CountryDef[] retrieveCountries()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SecurityGroup createSecurityGroup(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.SecurityGroup newGroup)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifySecurityGroup(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.SecurityGroup role)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeSecurityGroup(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.SecurityGroup group)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Saves the given Address
	 * 
	 * @param address
	 *            address to save
	 * @return Address address saved, complete with addressId
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.Address createAddress(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Address address)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns contact for a give contact ID.
	 * 
	 * @return Contact
	 * @throws DAOException
	 *             Data retrieval failed.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact retrieveContact(
			java.lang.Integer contactId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Creates the given Contact
	 * 
	 * @param contact
	 *            contact to create
	 * @return Contact contact created, complete with contactId
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact createContact(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact contact)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Saves the given Contact
	 * 
	 * @param contact
	 *            contact to save
	 * @return boolean
	 */
	public boolean modifyContact(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact contact)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Saves the given Contact
	 * 
	 * @param contact
	 *            contact to save trans
	 * @return boolean
	 */
	public boolean modifyContact(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact contact,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns an array of user names, formatted "lastName, firstName" and their
	 * corresponding userId.
	 * 
	 * @return SimpleIdDef[] Array of userId's and user name formatted as
	 *         "lastName, firstName"
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleIdDef[] retrieveUserList(
			boolean excludeInactiveUsers)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns the <code>EnumDetail</code> object currently associated with this
	 * enum detail id. If no enum details are found for this enum detail id,
	 * then <tt>null</tt> is returned.
	 * 
	 * @param enumDetailId
	 *            the enum detail id of the object requested.
	 * @return EnumDetail the enum detail object for this enum detail id.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.workflow.EnumDetail retrieveEnumDetail(
			int retrieveEnumDetail)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns all of the <code>EnumDetail</code> objects currently associated
	 * with this enum code. If no enum details are found for this enum code,
	 * then <tt>null</tt> is returned.
	 * 
	 * @param enumCd
	 *            The enum code of the object requested.
	 * @return EnumDetail[] All enum details for this enum cd.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.workflow.EnumDetail[] retrieveEnumDetails(
			java.lang.String enumCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns all of the <code>EnumDetail</code> objects currently defined in
	 * the system. If no enum details are found, then an empty array is
	 * returned.
	 * 
	 * @return EnumDetail[] All enum details in the system.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.workflow.EnumDetail[] retrieveAllEnumDetails()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns all of the <code>EnumDef</code> objects currently defined in the
	 * system. If no enum defs are found, then an empty array is returned.
	 * 
	 * @return EnumDef[] All enum details in the system.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrieveAllEnumDefs()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Inserts a record into the Enum_Detail_Def table of the database.
	 * 
	 * @param ed
	 *            EnumDetail object to be inserted into the database.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.workflow.EnumDetail createEnumDetail(
			us.oh.state.epa.stars2.database.dbObjects.workflow.EnumDetail ed)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Inserts a record into the Enum_Def table of the database.
	 * 
	 * @param enumCd
	 *            enum code.
	 * @param enumDsc
	 *            enum description.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef createEnumDef(
			java.lang.String enumCd, java.lang.String enumDsc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Updates the corresponding Enum_Detail_Def record in the database to
	 * correspond to the contents of <code>ed</code>. Returns <tt>true</tt> if a
	 * record was updated and <tt>false</tt> if no actual database update
	 * occurred, i.e., the enum Id was not found in the database.
	 * 
	 * @param ed
	 *            EnumDetail that needs to be updated in the database.
	 * @return <tt>true</tt> if a database record was updated, otherwise
	 *         <tt>false</tt>.
	 * @throws DAOException
	 *             Database access error.
	 */
	public boolean modifyEnumDetail(
			us.oh.state.epa.stars2.database.dbObjects.workflow.EnumDetail ed)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns a single DaemonInfo object given its <tt>daemonCode</tt>
	 * identifier. If no corresponding object was found, returns <tt>null</tt>.
	 * A valid code has a maximum of four characters.
	 * 
	 * @param daemonCode
	 *            Daemon code.
	 * @return DaemonInfo Corresponding info object.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.DaemonInfo retrieveDaemonInfo(
			java.lang.String daemonCode)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Creates a new Daemon object in the database from this <tt>info</tt>. Note
	 * that the daemon code must be unique or the insertion attempt will fail.
	 * The description is not inserted by this request.
	 * 
	 * @param info
	 *            DaemonInfo to be inserted.
	 * @throws DAOException
	 *             Database access error.
	 */
	public void createDaemonInfo(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.DaemonInfo info)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Updates a Daemon object in the database with the values contained in
	 * <code>info</code>. Returns <tt>true</tt> if a record was actually updated
	 * and <tt>false</tt> if no update occurred, i.e., no corresponding
	 * "daemon code" was found in the database.
	 * 
	 * @param info
	 *            Info object containing updated values.
	 * @return boolean <tt>true</tt> if a record was updated.
	 * @throws DAOException
	 *             Database access error.
	 */
	public boolean modifyDaemonInfo(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.DaemonInfo info)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns all of the EnumDef objects currently in the database.
	 * 
	 * @return EnumDef[] All enumeration set definitions.
	 * @throws Exception
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrieveEnumDefs()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns all ReportDefs currently in the database.
	 * 
	 * @return ReportDef[] All report definitions.
	 * @throws Exception
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.ReportDef[] retrieveReportDefs()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Returns all BulkDefs currently in the database.
	 * 
	 * @return BulkDef[] All report definitions.
	 * @throws Exception
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.BulkDef[] retrieveBulkDefs(
			java.lang.String bulkMenu)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Creates a new enumeration set in the database. The "enumDef" defines the
	 * code and description for the enumeration set. The "details" objects
	 * define the members of the enumeration set. Returns "true" if the set was
	 * successfully added to the system.
	 * 
	 * @param enumDef
	 *            EnumDef Enumeration definition object.
	 * @param details
	 *            EnumDetail[] Enumeration members.
	 * @return boolean="True"
	 * @throws Exception
	 *             Database access error.
	 */
	public boolean createEnumeration(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef enumDef,
			us.oh.state.epa.stars2.database.dbObjects.workflow.EnumDetail[] details)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Updates an enumeration set in the database. The "enumDef" defines the
	 * code and description for the enumeration set. The "details" objects
	 * define the members of the enumeration set. Returns "true" if the set was
	 * successfully added to the system.
	 * 
	 * @param enumDef
	 *            EnumDef Enumeration definition object.
	 * @param details
	 *            EnumDetail[] Enumeration members.
	 * @return boolean="True"
	 * @throws Exception
	 *             Database access error.
	 */
	public boolean modifyEnumeration(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef enumDef,
			us.oh.state.epa.stars2.database.dbObjects.workflow.EnumDetail[] details)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all values for a definition that has a code of type string -
	 * i.e., a SimpleIdDef
	 * 
	 * @return SimpleIdDef[] an array containing all the values
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleIdDef[] retrieveSimpleIdDefs(
			java.lang.String dbTable, java.lang.String dbIdColumn,
			java.lang.String dbDescColumn, java.lang.String dbDeprecatedColumn,
			java.lang.String sortByColumn)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all values for a definition that has a code of type string -
	 * i.e., a SimpleDef
	 * 
	 * @return SimpleDef[] an array containing all the values
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrieveSimpleDefs(
			java.lang.String dbTable, java.lang.String dbCodeColumn,
			java.lang.String dbDescColumn, java.lang.String dbDeprecatedColumn,
			java.lang.String sortByColumn)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Retrieves all values for a definition that has a code of type string -
	 * i.e., a SimpleDef which matches the where attribute value
	 * 
	 * @return SimpleDef[] an array containing all the values
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrieveSimpleDefs(
			java.lang.String dbTable, java.lang.String dbCodeColumn,
			java.lang.String dbDescColumn, java.lang.String dbDeprecatedColumn,
			java.lang.String sortByColumn, java.lang.String whereColumn,
			java.lang.String whereValue)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Creates a SimpleDef table entry i.e., a SimpleDef
	 * 
	 * @return SimpleDef
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef createSimpleDef(
			java.lang.String dbTable,
			java.lang.String dbCodeColumn,
			java.lang.String dbDescColumn,
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef sd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Modifies a column table entry i.e., a for definition and reference tables
	 * 
	 * @return boolean
	 */
	public boolean modifyColumn(java.lang.String dbTable,
			java.lang.String keyColumn, java.lang.String keyColumnType,
			java.lang.String keyValue, java.lang.String column,
			java.lang.String columnType, java.lang.String columnValue)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Modifies a SimpleDef table entry i.e., a SimpleDef
	 * 
	 * @return boolean
	 */
	public boolean modifySimpleDef(
			java.lang.String dbTable,
			java.lang.String dbCodeColumn,
			java.lang.String dbDescColumn,
			java.lang.String dbDeprecatedColumn,
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef sd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.ReportDef createReport(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.ReportDef report)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyReport(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.ReportDef report)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean removeReport(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.ReportDef report)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.BulkDef createBulkDef(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.BulkDef bulkOperation)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyBulkDef(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.BulkDef bulkOperation)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.ReportDef retrieveReport(
			int reportId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.BulkDef retrieveBulkDef(
			int bulkId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * This method will generate the requested JasperReport and return a
	 * JasperPrint Object.
	 * 
	 * @param jasperReportFileNm
	 * @param reportParms
	 * @return JasperPrint
	 * @throws DAOException
	 */
	public net.sf.jasperreports.engine.JasperPrint retrieveReport(
			java.lang.String jasperReportFileNm,
			java.util.Map<java.lang.String, java.lang.Object> reportParms)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEmissionsReport[] retrieveSCEmissionsReports()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.Fee retrieveFee(
			int feeId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEUCategory retrieveCategoryByFeeId(
			int feeId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.Fee createCategoryFee(
			us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.Fee newFee,
			int categoryId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEUCategory createSCEUCategory(
			us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEUCategory newCategory)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifySCEUCategory(
			us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEUCategory category)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyTask(
			us.oh.state.epa.stars2.database.dbObjects.Task task)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyTask(
			us.oh.state.epa.stars2.database.dbObjects.Task task,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.webcommon.ServiceFactoryException,
			java.rmi.RemoteException;

	public boolean modifyCategoryFee(
			us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.Fee fee)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEUCategory[] retrieveEUCategories()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEUCategory retrieveEUCategory(
			int categoryId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEmissionsReport retrieveSCEmissionsReport(
			java.lang.Integer reportId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEmissionsReport createSCEmissionsReport(
			us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEmissionsReport newReport)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifySCEmissionsReport(
			us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEmissionsReport report)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrievePollutants()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleDef[] retrieveReportPollutants()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public String getTriggerStatus(org.quartz.TriggerKey triggerKey)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void createSchedulerJob(org.quartz.JobDetail job)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void scheduleOneTimeTrigger(java.lang.String triggerName,
			java.util.Date dateToRun,
			java.util.HashMap<java.lang.String, java.lang.String> dataMap,
			java.lang.String jobName)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void scheduleDailyTrigger(java.lang.String triggerName,
			java.lang.Integer hour, java.lang.Integer minute,
			java.util.HashMap<java.lang.String, java.lang.String> dataMap,
			java.lang.String jobName)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void scheduleWeeklyTrigger(java.lang.String triggerName,
			java.lang.Integer dayOfWeek, java.lang.Integer hour,
			java.lang.Integer minute,
			java.util.HashMap<java.lang.String, java.lang.String> dataMap,
			java.lang.String jobName)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void scheduleMonthlyTrigger(java.lang.String triggerName,
			java.lang.Integer dayOfMonth, java.lang.Integer hour,
			java.lang.Integer minute,
			java.util.HashMap<java.lang.String, java.lang.String> dataMap,
			java.lang.String jobName)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void scheduleYearlyTrigger(java.lang.String triggerName,
			java.lang.Integer monthOfYear, java.lang.Integer dayOfMonth,
			java.lang.Integer hour, java.lang.Integer minute,
			java.util.HashMap<java.lang.String, java.lang.String> dataMap,
			java.lang.String jobName)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void createSchedulerJobTrigger(org.quartz.Trigger trigger)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeSchedulerJob(java.lang.String jobName)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeScheduledTrigger(java.lang.String triggerName,
			java.lang.String jobName)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SchedulerJob[] retrieveSchedulerJobs()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean isSchedulerRunning()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.InvoiceList[] searchInvoices(
			us.oh.state.epa.aport.admin.domain.User user,
			us.oh.state.epa.stars2.database.dbObjects.invoice.InvoiceList invSearchObj,
			boolean revenuesFirst)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice retrieveInvoiceRecord(
			int invoiceId, boolean isAtomicAction)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice retrieveInvoice(
			us.oh.state.epa.aport.admin.domain.User user, int invoiceId,
			boolean isAtomicAction)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void setInvoicePaymentLateInfo(int invoiceId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.webcommon.ContactUtil locateInvoiceContact(
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice,
			us.oh.state.epa.stars2.database.dbObjects.emissionReport.EmissionsReport tvSmtvRpt,
			us.oh.state.epa.stars2.webcommon.reports.NtvReport ntvReport)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Invoice creation method for use by migration code. Does not require the
	 * billing contact for the facility to be set.
	 * 
	 * @param invoice
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice createLegacyInvoice(
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Invoice creation method for use by migration code. Does not require the
	 * billing contact for the facility to be set.
	 * 
	 * @param invoice
	 * @param trans
	 * @return
	 * @throws DAOException
	 */
	public us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice createLegacyInvoice(
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.permit.PermitDocument generatePermitInvDocument(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dbObjects.permit.Permit permit,
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice inv,
			java.lang.String corrTypeCD,
			us.oh.state.epa.stars2.database.dbObjects.document.TemplateDocument templateDoc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			us.oh.state.epa.stars2.util.DocumentGenerationException,
			java.rmi.RemoteException;

	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ValidationMessage> prepareReportInvDocument(
			us.oh.state.epa.aport.admin.domain.User user,
			java.util.List<java.lang.Integer> pIDs)
			throws java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.emissionReport.EmissionsDocument generateReportInvDocument(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility,
			us.oh.state.epa.stars2.database.dbObjects.emissionReport.EmissionsReport report,
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice inv,
			java.lang.String corrTypeCD,
			us.oh.state.epa.stars2.database.dbObjects.document.TemplateDocument templateDoc)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			us.oh.state.epa.stars2.util.DocumentGenerationException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.MultiInvoiceList[] retrieveOtherInvoices(
			us.oh.state.epa.aport.admin.domain.User user,
			us.oh.state.epa.stars2.database.dbObjects.emissionReport.EmissionsReport report,
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean previousInvoiceExists(
			us.oh.state.epa.stars2.database.dbObjects.emissionReport.EmissionsReport report)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice retrievePreviousInvoice(
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice retrieveInvoiceByReportID(
			java.lang.Integer reportId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice retrieveInvoiceByReportID(
			us.oh.state.epa.aport.admin.domain.User user,
			java.lang.Integer reportId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice retrieveInvoiceByPermitID(
			us.oh.state.epa.aport.admin.domain.User user,
			java.lang.Integer permitID)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.InvoiceList[] retrieveInvoicesByFacilityID(
			java.lang.String facilityID)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice compareInvoice(
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice,
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice previousInvoice)
			throws java.rmi.RemoteException;

	public us.oh.state.epa.revenues.service.RevenuesService getRevenueService()
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * Handles Emissions Inventory Workflow Aggregate task - Returns a Revenue ID
	 * for new Invoices, and makes an adjustment to Adjusted Invoice which has a
	 * Revenue ID from its previous Invoice.
	 * 
	 * @param processIDs
	 * @param user
	 * @return ValidationMessage
	 * @throw DAOException
	 */
	public java.util.List<us.oh.state.epa.stars2.database.dbObjects.ValidationMessage> preparePostToRevenues(
			us.oh.state.epa.aport.admin.domain.User user,
			java.util.List<java.lang.Integer> pIDs,
			java.sql.Timestamp invoiceDate) throws java.rmi.RemoteException;

	public java.lang.String newerAvailable(java.lang.Integer rptId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage preparePostToRevenue(
			us.oh.state.epa.aport.admin.domain.User user,
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice,
			java.sql.Timestamp effectiveDate, boolean isAtomicAction)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage createAdjustment(
			us.oh.state.epa.aport.admin.domain.User user,
			java.lang.String adjustmentType,
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice,
			java.lang.Double amount, java.lang.String documentID,
			java.lang.String reason)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void performIndicatorAdjustment(
			us.oh.state.epa.aport.admin.domain.User user,
			java.lang.Integer revenueId, java.lang.String adjustmentType)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.revenues.domain.Revenue retrieveRevenue(
			us.oh.state.epa.aport.admin.domain.User user,
			java.lang.Integer revenueId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyInvoiceRecord(
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void modifyInvoiceRecord(
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyInvoice(
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void modifyInvoice(
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.InvoiceNote createInvoiceNote(
			us.oh.state.epa.stars2.database.dbObjects.invoice.InvoiceNote invoiceNote)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyInvoiceNote(
			us.oh.state.epa.stars2.database.dbObjects.invoice.InvoiceNote invoiceNote)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.invoice.InvoiceNote[] retrieveInvoiceNotes(
			java.lang.Integer invoiceId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean modifyInvoiceDocument(
			us.oh.state.epa.stars2.database.dbObjects.invoice.Invoice invoice)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact modifyContactData(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact contact)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	/**
	 * validate contact
	 * 
	 * @param contact
	 *            contact
	 * @return ValidationMessage[]
	 */
	public us.oh.state.epa.stars2.database.dbObjects.ValidationMessage[] validateContact(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact contact)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void modifyContactType(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.ContactType oldContactType,
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.ContactType contactType,
			java.lang.Integer fpId, int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void deleteContactType(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.ContactType contactType,
			java.lang.Integer fpId, int userId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.ContactType addContactType(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.ContactType contactType,
			java.lang.Integer fpId, int userId, String facilityId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.ContactType addContactType(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.ContactType contactType,
			java.lang.Integer fpId, int userId, String facilityId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SccCode[] retrieveSccCodes(
			java.util.List<java.lang.String> searchSccList)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SccCode retrieveSccCode(
			java.lang.String sccId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.FieldAuditLog[] searchFieldAuditLog(
			us.oh.state.epa.stars2.database.dbObjects.infrastructure.FieldAuditLog searchFieldAuditLog)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.def.BaseDef[] retrieveBaseDB(
			java.lang.String sqlLoadString, java.lang.Class objectToRetrieve)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.SimpleIdDef[] retrieveBaseIdDB(
			java.lang.String sqlLoadString, java.lang.Class objectToRetrieve)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.def.WrapnDef retrieveWrapnDef(
			java.lang.String wrapnCD)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.Integer nextSequenceVal(java.lang.String sequenceId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void incrementReferenceCount(java.lang.String taskId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void decrementReferenceCount(java.lang.String taskId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws java.rmi.RemoteException;

	public void decrementReferenceCountOnly(java.lang.String taskId,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws java.rmi.RemoteException;

/*	public void deleteTask(us.oh.state.epa.stars2.database.dbObjects.Task task)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;*/

	public void deleteTask(us.oh.state.epa.stars2.database.dbObjects.Task task,
			boolean deleteAttachmentFiles)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.Task[] retrieveTasks(
			us.oh.state.epa.stars2.database.dbObjects.Task filterTask)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.Task retrieveTask(
			java.lang.String taskId)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.Task createTask(
			us.oh.state.epa.stars2.database.dbObjects.Task newTask)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.Task createFacilityTask(
			us.oh.state.epa.stars2.database.dbObjects.Task newTask,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.Task createFacilityTask(
			us.oh.state.epa.stars2.database.dbObjects.Task newTask)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.Task createTask(
			us.oh.state.epa.stars2.database.dbObjects.Task newTask,
			us.oh.state.epa.stars2.database.dbObjects.Task depFacTask)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void deleteDataSet(java.lang.String dataSetId,
			java.lang.String userId) throws java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.Task createTask(
			us.oh.state.epa.stars2.database.dbObjects.Task newTask,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.webcommon.ServiceFactoryException,
			java.rmi.RemoteException;

	public java.lang.String submitTask(
			us.oh.state.epa.stars2.database.dbObjects.Task task,
			java.lang.String userId, java.lang.String pin,
			java.lang.String securityQuesAns)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void incrementTaskCounter(
			us.oh.state.epa.stars2.database.dbObjects.Task task)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.Hashtable<java.lang.String, us.oh.state.epa.stars2.database.adhoc.DataGridCellDef> getMetaData(
			java.lang.String table)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean insertAdHoc(
			us.oh.state.epa.stars2.database.adhoc.DataGridRow dgr,
			java.lang.String table,
			us.oh.state.epa.stars2.database.adhoc.DataGridRow dgrDefinition)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean updateAdHoc(
			us.oh.state.epa.stars2.database.adhoc.DataGridRow dgr,
			java.lang.String table,
			us.oh.state.epa.stars2.database.adhoc.DataGridRow dgrDefinition)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.util.List<javax.faces.model.SelectItem> retrievePickList(
			us.oh.state.epa.stars2.database.adhoc.DataGridRow dgrDefinition,
			java.lang.String field)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.adhoc.DataSet retrieveDataSet(
			us.oh.state.epa.stars2.database.adhoc.DataSet ds)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void processSubmittedTask(byte[] fromXmlTask)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public boolean fixFacilityContact(
			us.oh.state.epa.stars2.database.dbObjects.facility.Facility facility)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.document.Document[] keyWordSearch(
			java.lang.String query, int hitLimit)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void addAttestationDocumentToTask(
			us.oh.state.epa.stars2.database.dbObjects.Task task,
			us.oh.state.epa.stars2.database.dbObjects.document.Document doc,
			java.lang.String filename, java.io.InputStream is)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public void removeAttestationDocumentFromTask(
			us.oh.state.epa.stars2.database.dbObjects.Task task)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.document.Document uploadDocument(
			us.oh.state.epa.stars2.database.dbObjects.document.Document doc,
			java.lang.String filename, java.io.InputStream is)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public us.oh.state.epa.stars2.database.dbObjects.document.Document uploadDocument(
			us.oh.state.epa.stars2.database.dbObjects.document.Document doc,
			java.lang.String filename, java.io.InputStream is,
			us.oh.state.epa.stars2.database.dao.Transaction trans)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public java.lang.String getDAPCAttestationMessage(
			java.lang.String permitClassCd) throws java.rmi.RemoteException;

	public java.lang.String getCROMERRAttestationMessage(
			java.lang.String loginName)
			throws us.oh.state.epa.stars2.webcommon.ServiceFactoryException,
			java.rmi.RemoteException;

	public java.lang.String[] retreiveSubmittingAppUser(
			us.oh.state.epa.stars2.database.dbObjects.application.Application app)
			throws java.rmi.RemoteException;

	public java.lang.String[] retreiveSubmittingRptUser(java.lang.Integer id)
			throws java.rmi.RemoteException;

	public java.lang.Integer[] retrieveUsersWithUseCase(java.lang.String useCase)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public String retrieveUserWithPositionNumber(Integer positionNumber)
			throws DAOException;

	public DaemonInfo retrieveDaemonInfo(String string, String hostname) throws DAOException;

	public String registerDocument(Document doc) throws DAOException;

	public String registerDocument(String path) throws DAOException;

	public String registerSignature(String documentId, String organizationId, 
			String username, String redirectUrl) throws DAOException;
	
	public List<SCNonChargePollutant> retrievePollutantsByCategory(String category, int reportId) throws DAOException;
	
	public List<ForeignKeyReference> retrieveForeignKeyReferences(String tableName, String columnName, 
			String schema) throws DAOException;
	
	public boolean checkForeignKeyReferencedData(String tableName,	String columnName, Integer fkValue) throws DAOException;

	public boolean checkForeignKeyReferencedData(String tableName,	String columnName, Integer fkValue, String schema) throws DAOException;
	
	public String submitNewFacilityRequest(
			us.oh.state.epa.stars2.database.dbObjects.facilityRequest.FacilityRequest request)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public String processNewFacilityRequest(byte[] fromXmlTask)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;
	
	public boolean retrieveUserStatusByLogin(String login) throws java.rmi.RemoteException;
	
	/**
	 * Returns all of the counties currently defined in the system for the
	 * district.
	 * 
	 * @return CountyDef[] All counties for this district.
	 * @throws DAOException
	 *             Database access error.
	 */
	public us.oh.state.epa.stars2.database.dbObjects.infrastructure.CountyDef[] retrieveDistrictCounties(
			java.lang.String districtCd)
			throws us.oh.state.epa.stars2.framework.exception.DAOException,
			java.rmi.RemoteException;

	public TimeSheetRow createTimesheetEntry(TimeSheetRow row)
			throws DAOException;

	public void removeTimesheetEntry(TimeSheetRow modifyRow)
			throws DAOException;

	public boolean modifyTimesheetEntry(TimeSheetRow modifyRow)
			throws DAOException;

	public TimeSheetRow retrieveTimesheetEntry(Integer rowId)
			throws DAOException;

	public Shape[] retrieveShapes()
			throws DAOException;

	public boolean modifyShape(Shape modifyShape) throws DAOException;

	public Shape retrieveShape(Integer shapeId) throws DAOException;

	public void removeShape(Shape modifyShape) throws DAOException;
	
	List<String> retrieveProjectIdsAssociatedWithShape(Integer shapeId)
			throws DAOException;
	
	List<SimpleDef> retrieveProjectTypesByAppUsr(Integer userId)
			throws DAOException;
	
	List<String> retrieveInactiveProjectIdsAssociatedWithShape(Integer shapeId)
			throws DAOException;
	
	public boolean okToSaveServiceCatalogTemplate(
			us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.SCEmissionsReport newReport)
			throws us.oh.state.epa.stars2.framework.exception.DAOException;
	
	public Integer retrieveSCEmissionsReportId(
			Integer reportingYear, String contentTypeCd, String regulatoryRequirementCd) 
			throws us.oh.state.epa.stars2.framework.exception.DAOException;
	
	public boolean removeSCEmissionsReport(SCEmissionsReport report)
			throws us.oh.state.epa.stars2.framework.exception.DAOException;
	
	public Integer retrieveHighestPriorityRptReportId(
			Integer reportingYear, String contentTypeCd, String facilityId) 
			throws us.oh.state.epa.stars2.framework.exception.DAOException;
	
	public Integer getDefaultSearchLimit();

	public List<Integer> retrieveIndianReservationShapeIds() throws DAOException;
}

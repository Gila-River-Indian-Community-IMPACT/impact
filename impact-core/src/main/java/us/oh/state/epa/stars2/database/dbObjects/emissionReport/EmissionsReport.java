package us.oh.state.epa.stars2.database.dbObjects.emissionReport;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeSet;

import javax.faces.model.SelectItem;

import org.apache.log4j.Logger;

import us.oh.state.epa.stars2.CommonConst;
import us.oh.state.epa.stars2.bo.EmissionsReportService;
import us.oh.state.epa.stars2.database.dao.AbstractDAO;
import us.oh.state.epa.stars2.database.dbObjects.BaseDB;
import us.oh.state.epa.stars2.database.dbObjects.ValidationMessage;
import us.oh.state.epa.stars2.database.dbObjects.facility.EmissionUnit;
import us.oh.state.epa.stars2.database.dbObjects.facility.Facility;
import us.oh.state.epa.stars2.database.dbObjects.infrastructure.Contact;
import us.oh.state.epa.stars2.database.dbObjects.serviceCatalog.Fee;
import us.oh.state.epa.stars2.def.ContentTypeDef;
import us.oh.state.epa.stars2.def.DefData;
import us.oh.state.epa.stars2.def.ReportEisStatusDef;
import us.oh.state.epa.stars2.def.ReportReceivedStatusDef;
import us.oh.state.epa.stars2.framework.config.CompMgr;
import us.oh.state.epa.stars2.framework.exception.ApplicationException;
import us.oh.state.epa.stars2.webcommon.DisplayUtil;
import us.oh.state.epa.stars2.webcommon.ValidationBase;
import us.oh.state.epa.stars2.webcommon.reports.EmissionRow;
import us.oh.state.epa.stars2.webcommon.reports.PollutantRow;
import us.oh.state.epa.stars2.webcommon.reports.ReportProfileBase;
import us.oh.state.epa.stars2.webcommon.reports.ReportTemplates;

@SuppressWarnings("serial")
public class EmissionsReport extends BaseDB {
	
    public static DecimalFormat convertFormat = null;
    
    private Integer emissionsRptId;
    private String emissionsInventoryId;
    private boolean legacy; // true if a legacy report.
    private boolean autoGenerated; // true if generated by auto-generate command.
    //private Integer invoiceId;
    private Integer reportModified;
    private String revisionReason;
    private Integer companionReport;  // The other NTV report in the cycle
    private Integer fpId;
    private String facilityId;
    private Facility facility;
    private String rptReceivedStatusCd; // state of report
    private transient Timestamp rptReceivedStatusDate;  // submitted date
    private transient String submitLabel;
    private transient String submitValue;
    private long rptReceivedStatusDateLong;
    private transient Timestamp rptApprovedStatusDate;
    private long rptApprovedStatusDateLong;
    private Integer reportYear;
    private Integer feeId;
    private Integer feeId2;
    private Float totalEmissions;
    private String eisStatusCd;
    private String invoiceAmount;
    private Timestamp invoiceDate;
    private Timestamp paymentReceivedDate;
    private List<EmissionsDocumentRef> attachments = new ArrayList<EmissionsDocumentRef>(0);
    private List<EmissionsReportEU> eus = new ArrayList<EmissionsReportEU>(0);
    private List<EmissionsReportEUGroup> euGroups = new ArrayList<EmissionsReportEUGroup>(0);
    private List<EmissionsReportNote> notes = new ArrayList<EmissionsReportNote>(0);
    //private List<String> reportTypes = new ArrayList<String>(0);
    // emissionTotals contains the same elements as emissionTotalsTreeSet
    // needed because persistence cannot handle TreeSet.
    private List<EmissionTotal> emissionTotals = new ArrayList<EmissionTotal>(0);
    
    private transient Timestamp receiveDate;  // received date
    private long receiveDateLong;
    private transient Timestamp transferDate;  // used for NTV only
    private long transferDateLong;
    private transient Timestamp shutdownDate;  // used for NTV only
    private long shutdownDateLong;
    private boolean provideBothYears; // used for NTV only
    private boolean newOwner;  // (is this new or old owner)  used for NTV only
    private Contact prevOwnerForwardingAddr;  // used for NTV only
    private Contact newOwnerAddr;  // used for NTV only
    private Contact billingAddr;  // used for NTV only
    private Contact primaryAddr;  // used for NTV only
    private String facilityNm;  // used for NTV only
    
    // FOLLOWING NOT IN DATABASE (but not transient because of perisitence feature)
    // Read the Contact Ids from database and then read in the Contact objects
    // The XML should process the Contact object not just the Ids.
    // These Integers only used during retrieve of the report.
    private Integer prevOwnerForwardingAddrInteger;  // used for NTV only
    private Integer newOwnerAddrInteger;  // used for NTV only
    private Integer billingAddrInteger;  // used for NTV only
    private Integer PrimaryAddrInteger;  // used for NTV only
    
    // These hold the report type information from List reportTypes
    //private boolean rptFER;
    //private boolean rptEIS;
    //private boolean rptES;
 
    // Used to tie together a report (orig) and the report (comp) it is being
    // compared to.
    // These are for temporary in-memory use and not on disk.
    private EmissionsReport orig; // points to the original report object or
                                    // null
    private EmissionsReport comp; // points to the comparison report object or
                                    // null.
    private boolean caution; // indicate if caution should be displayed on
                                // tree.
    //private boolean eisRequired;  //  Is the EIS required.  If so, cannot reset.
    private boolean required;  //  Is it required.  If so, cannot reset.
    
    private boolean inStaging; // Is the report in the portal/staging database.
    private transient boolean fromCSV = false; // Report was imported from a csv file.
    // Keep emissionTotalsTreeSet transient because handled in readObjectt()
    private transient TreeSet<EmissionTotal> emissionTotalsTreeSet = new TreeSet<EmissionTotal>();
    
    private String billingContactFailureMsg = null;
    
    private Float totalReportedEmissions;
    
    private transient boolean containsTS; // only set when pdf generation done.
    
    private boolean validated = false;

    private Integer submitterContact;
    private Integer submitterUser;
    
    private List<ReportTemplates> serviceCatalogs = 
    		new ArrayList<ReportTemplates>();

    private String createContentTypeCd;
    
    private List<String> inspectionsReferencedIn;
    
    public EmissionsReport() {
        super();
        eisStatusCd = ReportEisStatusDef.NONE;
        orig = null;
        comp = null;
        caution = false;
    }

    public EmissionsReport(EmissionsReport old) {
        super(old);

        if (old != null) {
            setEmissionsRptId(old.getEmissionsRptId());
            setEmissionsInventoryId(old.getEmissionsInventoryId());
            setLegacy(old.isLegacy());
            setAutoGenerated(old.isAutoGenerated());
            setReportModified(old.getReportModified());
            setRevisionReason(old.getRevisionReason());
            setFpId(old.getFpId());
            setRptReceivedStatusCd(old.getRptReceivedStatusCd());
            setRptReceivedStatusDate(old.getRptReceivedStatusDate());
            setRptApprovedStatusDate(old.getRptApprovedStatusDate());
            setReportYear(old.getReportYear());
            setFeeId(old.getFeeId());
            setFeeId2(old.getFeeId2());
            setTotalEmissions(old.getTotalEmissions());
            setEisStatusCd(old.getEisStatusCd());
            setAttachments(old.getAttachments());
            setEus(old.getEus());
            setEuGroups(old.getEuGroups());
            setNotes(old.getNotes());
            //setReportTypes(old.getReportTypes());
            //expandRptTypes();
            setInvoiceAmount(old.getInvoiceAmount());
            setInvoiceDate(old.getInvoiceDate());
            setPaymentReceivedDate(old.getPaymentReceivedDate());
            setReceiveDate(old.getReceiveDate());
            setTransferDate(old.getTransferDate());
            setShutdownDate(old.getShutdownDate());
            setProvideBothYears(old.isProvideBothYears());
            setNewOwner(old.isNewOwner());
            setPrevOwnerForwardingAddr(old.getPrevOwnerForwardingAddr());
            setNewOwnerAddr(old.getNewOwnerAddr());
            setBillingAddr(old.getBillingAddr());
            setPrimaryAddr(old.getPrimaryAddr());
            setFacilityNm(old.getFacilityNm());
            setTotalReportedEmissions(old.getTotalReportedEmissions());
            setValidated(old.isValidated());
            setSubmitterContact(old.getSubmitterContact());
            setSubmitterUser(old.getSubmitterUser());
            setServiceCatalogs(old.getServiceCatalogs());
            setCreateContentTypeCd(old.getCreateContentTypeCd());
        }
    }
    
    
    
	public String getCreateContentTypeCd() {
		return createContentTypeCd;
	}

	public void setCreateContentTypeCd(String createContentTypeCd) {
		this.createContentTypeCd = createContentTypeCd;
	}

	public List<ReportTemplates> getServiceCatalogs() {
		if(null == this.serviceCatalogs) {
			return new ArrayList<ReportTemplates>(0);
		}
		return serviceCatalogs;
	}

	public void setServiceCatalogs(List<ReportTemplates> serviceCatalogs) {
		this.serviceCatalogs = serviceCatalogs;
	}

	public String getContentTypeCd() {
		if (null != getServiceCatalogs() && getServiceCatalogs().size() > 0) {
			return getServiceCatalogs().get(0).getSc().getContentTypeCd();
		}
		return null;
    }
    
	public static double convertStringToNum(String v, Logger logger) {
        double d = 0d;
        if(v != null && v.length() > 0) {
            d = Double.valueOf(v.toUpperCase().replace(",", ""));
        }
        return d;
    }
    
    public static double convertStringToNum(String v) {
        double d = 0d;
        if(v != null && v.length() > 0) {
            d = Double.valueOf(v.toUpperCase().replace(",", ""));
        }
        return d;
    }
    
    public static String numberToStringNoE(Double d) {
        String s = null;
        if(d != null) {
            String format = null;
            if(d == 0d) format = "#0.";
            else {
                if(d < 100000000000d) format = "##,###,###,##0.";
                if(d < 10000000000d) format = "#,###,###,##0.";
                if(d < 1000000000d) format = "###,###,##0.";
                if(d < 100000000d) format = "##,###,##0.";
                if(d < 10000000d) format = "#,###,##0.";
                if(d < 1000000d) format = "###,##0.";
                if(d < 100000d) format = "##,##0.#";
                if(d < 10000d) format = "#,##0.##";
                if(d < 1000d) format = "##0.###";
                if(d < 100d) format = "#0.####";
                if(d < 10d) format = "#.#####";
                if(d < 1d) format = "0.######";
                if(d < 0.1d) format = "0.#######";
                if(d < 0.01d) format = "0.########";
            }
            if(format != null) {
                DecimalFormat decFormat = new DecimalFormat(format);
                s = decFormat.format(d);
            } else {
                s = "99999999999.";
            }
        }
        return s;
    }
    
    public boolean hasNonXAttachments() {
        boolean hasAttachments = false;
        if(attachments != null) {
            for(EmissionsDocumentRef a : attachments) {
                if(DefData.isDapcAttachmentOnly(a.getEmissionsDocumentTypeCD())) continue;
                hasAttachments = true;
                break;
            }
        }
        return hasAttachments;
    }
    
    /*
    public final void expandRptTypes() {
        rptFER = false;
        rptEIS = false;
        rptES = false;
        for (String s : reportTypes) {

            if (s.equals(ReportGroupTypes.FERType))
                rptFER = true;
            else if (s.equals(ReportGroupTypes.EISType))
                rptEIS = true;
            else if (s.equals(ReportGroupTypes.ESType))
                rptES = true;
            else {
                // write an error message to log that illegal type exists.
            }
        }
    }
    */
    /*
    public final void resetRptTypes() {
        ArrayList<String> l = new ArrayList<String>();
        if (rptFER)
            l.add(ReportGroupTypes.FERType);
        if (rptEIS)
            l.add(ReportGroupTypes.EISType);
        if (rptES)
            l.add(ReportGroupTypes.ESType);
        this.setReportTypes(l);
    }
    */
    /*
    public final void clearRptTypes() {
        reportTypes = new ArrayList<String>();
    }
    */
    
    public static final EmissionsReport cloneNTVReport(EmissionsReport rpt) {
        if(rpt == null) return null;
        EmissionsReport newRpt = new EmissionsReport();
        newRpt.feeId = rpt.feeId;
        newRpt.reportYear = rpt.reportYear;
        newRpt.setAttachments(new ArrayList<EmissionsDocumentRef>(0));  // clear out all attachments
        return newRpt;
    }
    
    public void determineNtvTons(int minValue, ReportTemplates scReports) {
        totalEmissions = null;
        boolean any = false;
        if(scReports.getSc() != null) {
            for( Fee f : scReports.getSc().getFees()) {
                if(!f.getFeeId().equals(feeId)) {
                    continue;
                }
                if(f.getLowRange() >= minValue){
                    // Add up emissions
                    double v = 0.d;
                    for(EmissionTotal e : emissionTotalsTreeSet) {
                        if(e.isFerPollutant() && e.getTotalEmissions() != null) {
                            v +=  EmissionsReport.convertStringToNum(e.getTotalEmissions(), logger);
                            any = true;
                        }
                    }
                    if(any) totalEmissions = (float)v;
                    else totalEmissions = null;
                }
                break;
            }
        }
    }

    public final String uniqueDefaultName() {
        String gName = "name";
        int cnt = 0;
        boolean dup = true;
        while (dup) {
            cnt++;
            dup = false;
            gName = (cnt == 1) ? "name" : "name " + cnt;
            for (EmissionsReportEUGroup g : getEuGroups()) {
                if (gName.equals(g.getReportEuGroupName())) {
                    dup = true;
                    break;
                }
            }
        }
        return gName;
    }
    
    public final List<ValidationMessage> verifyNTVOwnerShutdown(boolean internal,
            boolean ownerChange, Integer whichOwner,
            boolean shutdown, List<SelectItem> pickListTransfers) {
        // Performed only upon the Primary Report
        if(internal && receiveDate == null) {
            validationMessages.put("receiveDate", new ValidationMessage(
                    "receiveDate", "Must specify a received date",
                    ValidationMessage.Severity.ERROR, ValidationBase.REPORT_TAG));
        }
        if(ownerChange) {
            if(whichOwner == null) {
                validationMessages.put("whichOwner", new ValidationMessage(
                        "whichOwner", "Must indicate whether you bought or sold facility",
                        ValidationMessage.Severity.ERROR, ValidationBase.REPORT_TAG));
            }
            if(getTransferDate() == null) {
                validationMessages.put("transferDate", new ValidationMessage(
                        "transferDate", "Must specify the ownership transfer date",
                        ValidationMessage.Severity.ERROR, ValidationBase.REPORT_TAG));
            } else {
                boolean isEarlier = false;
                boolean isEqual = false;
                for(SelectItem si : pickListTransfers) {
                    if(transferDate.before((Timestamp)si.getValue())) {
                        isEarlier = true;
                    }
                    if(transferDate.equals((Timestamp)si.getValue())) {
                        isEqual = true;
                    }
                }
                if(isEarlier && !isEqual) {
                    validationMessages.put("transferDate2", new ValidationMessage(
                            "transferDate2", "The specified Transfer Date does not match the existing start date of an owner and there is already an owner with a more recent start date.  You can only provide this ownership information by direct communication with DAPC.",
                            ValidationMessage.Severity.ERROR, ValidationBase.REPORT_TAG));
                }
            }
        }
        if(shutdown) {
            if(getShutdownDate() == null) {
                validationMessages.put("shutdownDate", new ValidationMessage(
                        "shutdownDate", "Must specify the shutdown date",
                        ValidationMessage.Severity.ERROR, ValidationBase.REPORT_TAG));
            }
        }

        return new ArrayList<ValidationMessage>(validationMessages.values());
    }
    
    public List<ValidationMessage> validateNtvRpt(int minValue,
            ReportTemplates scReports, String evenOdd) {
    	/* Used by NtvReport.java, which is not yet supported by IMPACT. Revisit when we support NTV emissions reports.
        int i = 0;
        Fee theFee = null;
        // Check emissions range
        if(feeId == null) {
            validationMessages.put("Range" + evenOdd,
                    new ValidationMessage("range" + evenOdd,
                            "Emissions Information for " +
                            reportYear + " not specified",
                            ValidationMessage.Severity.ERROR, ValidationBase.REPORT_TAG));
        } else {
            theFee = scReports.getSc().locateFee(feeId);
            if(theFee.getLowRange() >= minValue) {
                // Check emissions details
                boolean allSetToValues = true;
                double total = 0d;
                for(EmissionTotal et : emissionTotalsTreeSet) {
                    if(et.isFerPollutant()) {
                        if(et.getTotalEmissions() == null) {
                            allSetToValues = false;
                            validationMessages.put("FERDtl " + reportYear + i++,
                                    new ValidationMessage("FERDtrl" + evenOdd,
                                            "Additional Emissions Information for " +
                                            reportYear + " does not include value for pollutant " +
                                            NonToxicPollutantDef.getTheDescription(et.getPollutantCd()),
                                            ValidationMessage.Severity.ERROR, ValidationBase.REPORT_TAG));
                        } else {
                            total = total + EmissionsReport.convertStringToNum(et.getTotalEmissions(),
                                    logger);
                        }
                    }
                }
                if(allSetToValues){
                    if(total < theFee.getLowRange()) {
                        validationMessages.put("FERDtl " + reportYear + i++,
                                new ValidationMessage("FERDtrl" + evenOdd,
                                        "Additional Emissions Information for " +
                                        reportYear + " does not add up to at least " +
                                        theFee.getLowRange() + " as indicated by specified range",
                                        ValidationMessage.Severity.ERROR, ValidationBase.REPORT_TAG));
                    }
                    if(theFee.getHighRange() != null) {
                        if(total >= theFee.getHighRange().intValue()) {
                            validationMessages.put("FERDtl " + reportYear + i++,
                                    new ValidationMessage("FERDtrl" + evenOdd,
                                            "Additional Emissions Information for " +
                                            reportYear + " adds up to " +
                                            theFee.getHighRange() + " or more which does not match specified range",
                                            ValidationMessage.Severity.ERROR, ValidationBase.REPORT_TAG));
                        }
                    }
                }     
            }
        }
        // Check ES
        if (rptES){
            for(EmissionTotal et : emissionTotalsTreeSet) {
                if(et.getTotalEmissions() == null) {
                    // Note that we don't check to see if ES pollutants add up to the required
                    // value--this allows the user to specify even in this case.
                    if(et.isEsPollutant() && !et.isFerPollutant()) {
                        validationMessages.put("ESDtl " + reportYear + i++,
                                new ValidationMessage("edit",
                                        "Emission Statement for " +
                                        reportYear + " does not include value for pollutant " +
                                        NonToxicPollutantDef.getTheDescription(et.getPollutantCd()),
                                        ValidationMessage.Severity.ERROR, ValidationBase.REPORT_TAG));
                    }
                }
            }
        }
        */
        
        return new ArrayList<ValidationMessage>(validationMessages.values());
    }
    
    public final ValidationMessage[] verifyUniqueGrpName(String grpName,
            EmissionsReportEUGroup grpEmissionUnit) {
        // Confirm that entered name is exists and is unique
        boolean unique = true;
        if(grpName == null || grpName.trim().length() == 0) {
            validationMessages.put("grpName", new ValidationMessage(
                    "groupName", "Group name must be provided",
                    ValidationMessage.Severity.ERROR, grpName));
            return new ArrayList<ValidationMessage>(validationMessages.values())
            .toArray(new ValidationMessage[0]);
        } else { 
            for (EmissionsReportEUGroup g : getEuGroups()) {
                if (g.getReportEuGroupID().equals(
                        grpEmissionUnit.getReportEuGroupID())) {
                    continue; // skip this one.
                }
                if (grpName.equals(g.getReportEuGroupName())) {
                    unique = false;
                    break;
                }
            }
        }
        if (!unique) {
            validationMessages.put("grpName", new ValidationMessage(
                    "groupName", "Group name must be unique",
                    ValidationMessage.Severity.ERROR, grpName));
        } else {
            validationMessages.remove("grpName");
        }
        return new ArrayList<ValidationMessage>(validationMessages.values())
                .toArray(new ValidationMessage[0]);
    }

    public final List<EmissionsReportEUGroup> getEuGroups() {
        return euGroups;
    }
    
    public final EmissionsReportEUGroup findEuGroup(String name) {
        for(EmissionsReportEUGroup g : euGroups) {
            if(g.getReportEuGroupName().equals(name)) {
                return g;
            }
        }
        return null;
    }

    public final void addEuGroup(EmissionsReportEUGroup newEuGroup) {
        if ((newEuGroup != null) && (!euGroups.contains(newEuGroup))) {
            // put in alphabetic order
            int i;
            boolean insertBefore = false;
            for(i=0; i<euGroups.size(); i++) {
                if(newEuGroup.getReportEuGroupName().compareToIgnoreCase
                        (euGroups.get(i).getReportEuGroupName()) < 0) {
                    // EU to add is less than one being compared to
                    insertBefore = true;
                    break;
                }
            }
            if(insertBefore) {
                euGroups.add(i, newEuGroup);
            } else {
                euGroups.add(newEuGroup);
            }
        }
    }

    public final void setEuGroups(List<EmissionsReportEUGroup> euGroups) {
        if (euGroups == null) {
            this.euGroups = new ArrayList<EmissionsReportEUGroup>();
        } else {
            this.euGroups = euGroups;
        }
    }

    public final List<EmissionsDocumentRef> getAttachments() {
        if(attachments == null) {
            attachments = new ArrayList<EmissionsDocumentRef>(0);
        }
        return attachments;
    }

    public final void addAttachment(EmissionsDocumentRef attachment) {
        if ((attachment != null) && (!attachments.contains(attachment))) {
            attachments.add(attachment);
        }
    }

    public final EmissionsReportEU findEU(EmissionsReportPeriod p) {
        for (EmissionsReportEU e : getEus()) {
            for (EmissionsReportPeriod erp : e.getPeriods()) {
                // Find report EU that references this period object (not just
                // value)
                if (erp.getEmissionPeriodId().equals(p.getEmissionPeriodId())) {
                    return e;
                }
            }
        }
        return null;
    }

    public final EmissionsReportEUGroup findEuG(EmissionsReportPeriod p) {
        for (EmissionsReportEUGroup g : getEuGroups()) {
            // Find report EU Group that references this
            //  period object (not just value)
            if (g.getPeriod() == p) {
                return g;
            }
        }
        return null;
    }
    
    public final EmissionsReportEUGroup findEuG(Integer groupId) {
        for (EmissionsReportEUGroup g : getEuGroups()) {
            if (g.getReportEuGroupID().equals(groupId)) {
                return g;
            }
        }
        return null;
    }
    
    public final EmissionsReportEUGroup findEuGContainingEU(Integer correlationId, String sccId) {
        for (EmissionsReportEUGroup g : getEuGroups()) {
            if (g.containsEU(correlationId) && sccId.equals(g.getPeriod().getSccId())) {
                return g;
            }
        }
        return null;
    }

    public void setAttachments(
            List<EmissionsDocumentRef> attachments) {
        if (attachments == null) {
            this.attachments = new ArrayList<EmissionsDocumentRef>();
        } else {
            this.attachments = attachments;
        }
    }
    
    public List<ValidationMessage> submitVerify(EmissionsReportService eRBO, boolean vErrors)
            throws ApplicationException {
        ArrayList<ValidationMessage> validMessages = new ArrayList<ValidationMessage>();
        
        addReturnLink(validMessages, vErrors);
        if(reportModified != null && (revisionReason == null || revisionReason.length() == 0)) {
            validMessages.add(new ValidationMessage("revReasonMissing", "Reason/explanation for the revision is missing",
                    ValidationMessage.Severity.ERROR, "report:R" + emissionsRptId));
        }
        // Do Report Validations
        List<ValidationMessage> validMsgs;
        // Verify EU Group periods
        for(EmissionsReportEUGroup g : euGroups) {
            g.clearValidationMessages();
            validMsgs = g.submitVerify();
            addReturnLink(validMessages, validMsgs.size() != 0);
            validMessages.addAll(validMsgs);
            if(validMsgs.size() == 0) { // only validate processes if group had no errors.
                g.getPeriod().clearValidationMessages();
                validMsgs = g.getPeriod().submitVerify(eRBO, g.getReportEuGroupName(), this);
                addReturnLink(validMessages, validMsgs.size() != 0);
                validMessages.addAll(validMsgs);
            }
        }
        
        // Verify EU periods
        for(EmissionsReportEU eu : eus) {
            eu.clearValidationMessages();
            validMsgs = eu.submitVerify(); // List<ValidationMessage>
            addReturnLink(validMessages, validMsgs.size() != 0);
            validMessages.addAll(validMsgs);
            if(validMsgs.size() == 0) { // only validate processes if EU had no errors
                for(EmissionsReportPeriod p : eu.getPeriods()) {
                    p.clearValidationMessages();
                    validMsgs = p.submitVerify(eRBO, eu.getEpaEmuId(), this);
                    //add euId and referenceId, update message details in ValidationMessage Object
                    for (ValidationMessage Msg : validMsgs){
                    	if (Msg.getEuId()==null){
                    		Msg.setEuId(eu.getEpaEmuId());
                    		Msg.setMessage("P: " + p.getTreeLabel() + " - " + Msg.getMessage() );
                    		Msg.setReferenceID("period:" + ReportProfileBase.treeNodeId(p));
                    	}
                    }
                    addReturnLink(validMessages, validMsgs.size() != 0);
                    validMessages.addAll(validMsgs);
                }
                
                // Warn user if first/second half operating percentages differ across processes for an EU
                List <Integer> firstHalfOpPcts = new ArrayList<Integer>(0);
                List <Integer> secondHalfOpPcts = new ArrayList<Integer>(0);
                Integer firstHalfOpPct = null;
                Integer secondHalfOpPct = null;
                
                for(EmissionsReportPeriod p : eu.getPeriods()) {
                	firstHalfOpPct = p.getFirstHalfHrsOfOperationPct();
                	secondHalfOpPct = p.getSecondHalfHrsOfOperationPct();
                	if(firstHalfOpPct != null && secondHalfOpPct != null 
                			&& !firstHalfOpPcts.contains(firstHalfOpPct) && !secondHalfOpPcts.contains(secondHalfOpPct)) {
                		firstHalfOpPcts.add(firstHalfOpPct);
                		secondHalfOpPcts.add(secondHalfOpPct);
                	}
                }	
                if(firstHalfOpPcts.size() > 1 && secondHalfOpPcts.size() > 1 ) {
                	validMessages.add(new ValidationMessage("edit",                            
                						"Emission Unit:" + eu.getEpaEmuId()
                						+ " has differing first/second half operating percentages across processes",
                                        ValidationMessage.Severity.WARNING, "unit:"
                                        + ReportProfileBase.treeNodeId(this),
                                        eu.getEpaEmuId()));
                }
            }
        }
       
        return validMessages;
    }
    
    void addReturnLink(List<ValidationMessage> validationMessages, boolean vErrors) {
/*    	
      if(vErrors && validationMessages.size() == 0) {
          validationMessages.add(new ValidationMessage("rtn_to_rpt", "Return to Report",
                  ValidationMessage.Severity.INFO, "report:R" + emissionsRptId));
      } else {
    	  validationMessages.add(new ValidationMessage("rtn_to_rpt", "Return to Report",
                  ValidationMessage.Severity.INFO, "report:R" + emissionsRptId));          
      }
*/
    }

    public final Integer getEmissionsRptId() {
        return emissionsRptId;
    }

    public final void setEmissionsRptId(Integer emissionsRptId) {
        this.emissionsRptId = emissionsRptId;
    }
    
    public final String getEmissionsInventoryId() {
        return emissionsInventoryId;
    }

    public final void setEmissionsInventoryId(String emissionsInventoryId) {
        this.emissionsInventoryId = emissionsInventoryId;
    }

    public final List<EmissionsReportEU> getEus() {
        return eus;
    }

    public final EmissionsReportEU getEu(String epaEmuId) {
        for (EmissionsReportEU rEu : this.getEus()) {
            if(rEu.getEpaEmuId() != null) {  // may not have an Id.
                if (rEu.getEpaEmuId().compareTo(epaEmuId) == 0) {
                    return rEu;
                }
            }
        }
        return null;
    }

    public final EmissionsReportEU getEu(Integer corrId) {
        for (EmissionsReportEU rEu : this.getEus()) {
            if (rEu.getCorrEpaEmuId().equals(corrId)) {
                return rEu;
            }
        }
        return null;
    }

    public final void addEu(EmissionsReportEU eu) {
        if ((eu != null) && (!eus.contains(eu))) {
            eus.add(eu);
        }
    }

    public void setEus(List<EmissionsReportEU> eus) {
        if (eus == null) {
            this.eus = new ArrayList<EmissionsReportEU>();
        } else {
            this.eus = eus;
        }
    }

    public final List<EmissionsReportNote> getNotes() {
        if (notes == null) {
            notes = new ArrayList<EmissionsReportNote>(0);
        }
        return notes;
    }

    public final void addNote(EmissionsReportNote note) {
        if (notes == null) {
            notes = new ArrayList<EmissionsReportNote>();
        }
        notes.add(note);
    }

    public void setNotes(List<EmissionsReportNote> notes) {
        if (notes == null) {
            this.notes = new ArrayList<EmissionsReportNote>();
        } else {
            this.notes = notes;
        }
    }
    
    public void clearNotes() {
        notes = new ArrayList<EmissionsReportNote>(0);
    }

    //public final List<String> getReportTypes() {
    //    return reportTypes;
    //}

    //public final void addReportType(String type) {
    //    if(!reportTypes.contains(type)) {
    //        reportTypes.add(type);
    //    }
    //}

    //public void setReportTypes(List<String> reportTypes) {
    //    if (reportTypes == null) {
    //        this.reportTypes = new ArrayList<String>();
    //    } else {
    //        this.reportTypes = reportTypes;
    //    }
    //}
    
    public void addNTVPollutants(ReportTemplates scReports) {
    	/* Used by ErNTVBase.java, which is not yet supported by IMPACT. Revisit when we support NTV emissions reports.
        int orderOffset = 0;
        if(scReports.getSc() != null) {
            // orderOffset used to provide distinct order values
            // even if distinct order values not in report definition. 
            for(SCPollutant p : scReports.getSc().getPollutants()) {
                if(!p.isChargeable()) continue;
                EmissionTotal elm = locateInTreeSet(p.getPollutantCd());
                // As long as there are less than 100 pollutants in report
                // definition, all the order values will be distinct and
                // remain in the desired order.
                int o = p.getDisplayOrder() * 100 + orderOffset++;
                if(elm != null)  {
                    emissionTotalsTreeSet.remove(elm);
                    elm.setFerPollutant(true);
                    elm.setOrder(o);
                    emissionTotalsTreeSet.add(elm);
                } else {
                    EmissionTotal e = new EmissionTotal();
                    e.setEmissionsRptId(emissionsRptId);
                    e.setPollutantCd(p.getPollutantCd());
                    e.setOrder(o);
                    e.setFerPollutant(true);
                    emissionTotalsTreeSet.add(e);
                    emissionTotals.add(e);
                }
            }
        }
        if(scReports.getScES() != null) {
            for(SCPollutant p : scReports.getScES().getPollutants()) {
                EmissionTotal elm = locateInTreeSet(p.getPollutantCd());
                int o = p.getDisplayOrder() * 100 + orderOffset++;
                if(elm != null)  {
                    emissionTotalsTreeSet.remove(elm);
                    elm.setEsPollutant(true);
                    elm.setOrder(o);
                    emissionTotalsTreeSet.add(elm);

                } else {
                    EmissionTotal e = new EmissionTotal();
                    e.setEmissionsRptId(emissionsRptId);
                    e.setPollutantCd(p.getPollutantCd());
                    e.setOrder(o);
                    e.setEsPollutant(true);
                    emissionTotalsTreeSet.add(e);
                    emissionTotals.add(e);
                }
            }
        }
        
        // Remove any pollutants that do not belong to FER or ES
        Iterator<EmissionTotal> i = emissionTotalsTreeSet.iterator();
        while(i.hasNext()) {
            EmissionTotal e = i.next();
            if(!e.isFerPollutant() && !e.isEsPollutant()) {
                i.remove();
                emissionTotals.remove(e);
            }
        }
        */
    }
    
    public List<EmissionTotal> getESList(ReportTemplates scReports) {
        ArrayList<EmissionTotal> eList = new ArrayList<EmissionTotal>();
        /* Used by ErNTVBase.java which is not yet supported by IMPACT. Revisit when we support NTV emissions reports.
        if(scReports.getScES() != null) {
            TreeSet<EmissionTotal> t = new TreeSet<EmissionTotal>();
            for(SCPollutant p : scReports.getScES().getPollutants()) {
                EmissionTotal e = new EmissionTotal();
                e.setEmissionsRptId(emissionsRptId);
                e.setPollutantCd(p.getPollutantCd());
                e.setOrder(p.getDisplayOrder());
                t.add(e);
            }
            for(EmissionTotal et : t) {
                eList.add(et);
            }
        }
        */
        return eList;
    }
    
    public EmissionTotal locateInTreeSet(String pollutantCd) {
        for(EmissionTotal e : emissionTotalsTreeSet) {
            if(pollutantCd.equals(e.getPollutantCd())){
                return e;
            }
        }
        return null;
    }
    
    public List<EmissionTotal> getFerPollutants() {
         ArrayList<EmissionTotal> lst = new ArrayList<EmissionTotal>();
         for(EmissionTotal e : emissionTotalsTreeSet) {
             if(e.isFerPollutant()) {
                 lst.add(e);
             }
         }
         return lst;
    }
    
    public List<EmissionTotal> getEsPollutants() {
        ArrayList<EmissionTotal> lst = new ArrayList<EmissionTotal>();
        for(EmissionTotal e : emissionTotalsTreeSet) {
            if(e.isEsPollutant()) {
                lst.add(e);
            }
        }
        return lst;
   }
    
    // return true if approved and/or dead-ended (emissions inventory not needed)
    public final boolean processed() {
        boolean rtn = false;
        if(ReportReceivedStatusDef.isApprovedCode(rptReceivedStatusCd) ||
                ReportReceivedStatusDef.isHandledNotApprovedCode(rptReceivedStatusCd)) {
            rtn = true;
        }
        return rtn;
    }
    
    public final Integer getFpId() {
        return fpId;
    }

    public final void setFpId(Integer fpId) {
        this.fpId = fpId;
    }

    public String getFacilityId() {
		return facilityId;
	}

	public void setFacilityId(String facilityId) {
		this.facilityId = facilityId;
	}

	public Facility getFacility() {
		return facility;
	}

	public void setFacility(Facility facility) {
		this.facility = facility;
	}

	public final String getRptReceivedStatusCd() {
        return rptReceivedStatusCd;
    }

    public final void setRptReceivedStatusCd(String rptReceivedStatusCd) {
        this.rptReceivedStatusCd = rptReceivedStatusCd;
    }

    public final Timestamp getRptReceivedStatusDate() {
        return rptReceivedStatusDate;
    }

    public final void setRptReceivedStatusDate(Timestamp rptReceivedStatusDate) {
        this.rptReceivedStatusDate = rptReceivedStatusDate;
        if (this.rptReceivedStatusDate != null) {
            this.rptReceivedStatusDateLong = this.rptReceivedStatusDate.getTime();
        } else {
            this.rptReceivedStatusDateLong = 0;
        }
    }

    public final Integer getReportYear() {
        return reportYear;
    }

    public final void setReportYear(Integer reportYear) {
        this.reportYear = reportYear;
    }

    public final Float getTotalEmissions() {
        return totalEmissions;
    }

    public final void setTotalEmissions(Float totalEmissions) {
        this.totalEmissions = totalEmissions;
    }

    public final void populate(ResultSet rs) {
        boolean readAll = false;
        try {
            setEmissionsRptId(AbstractDAO.getInteger(rs, "emissions_rpt_id"));
            setEmissionsInventoryId(rs.getString("ei_id"));
            setLegacy(AbstractDAO.translateIndicatorToBoolean(rs.getString("legacy_flag")));
            setAutoGenerated(AbstractDAO.translateIndicatorToBoolean(rs.getString("auto_generated")));
            setReportModified(AbstractDAO.getInteger(rs, "report_modified"));
            setCompanionReport(AbstractDAO.getInteger(rs, "companion_report"));
            setFpId(AbstractDAO.getInteger(rs, "fp_id"));
            setRptReceivedStatusCd(rs.getString("rpt_received_status_cd"));
            setRptReceivedStatusDate(rs.getTimestamp("rpt_received_status_dt"));
            setRptApprovedStatusDate(rs
                    .getTimestamp("report_approved_status_dt"));
            setReportYear(AbstractDAO.getInteger(rs, "report_year"));
            setTotalEmissions(AbstractDAO.getFloat(rs, "total_emissions"));     // includes chargeable only
            setFeeId(AbstractDAO.getInteger(rs, "fee_id"));
            setFeeId2(AbstractDAO.getInteger(rs, "fee_id2"));
            setEisStatusCd(rs.getString("eis_status_cd"));
            setTransferDate(rs.getTimestamp("transfer_date"));
            setShutdownDate(rs.getTimestamp("shutdown_date"));
            setProvideBothYears(AbstractDAO.translateIndicatorToBoolean(rs.getString("provide_both_years")));
            setNewOwner(AbstractDAO.translateIndicatorToBoolean(rs.getString("new_owner")));
            setPrevOwnerForwardingAddrInteger(AbstractDAO.getInteger(rs, "prev_owner_forwarding_addr"));
            setNewOwnerAddrInteger(AbstractDAO.getInteger(rs, "new_owner_addr"));
            setBillingAddrInteger(AbstractDAO.getInteger(rs, "billing_addr"));
            setFacilityNm(rs.getString("facility_nm"));
            setReceiveDate(rs.getTimestamp("received_date"));
            setRevisionReason(rs.getString("revision_reason"));
            setPrimaryAddrInteger(AbstractDAO.getInteger(rs, "primary_addr"));
            setInvoiceAmount(String.valueOf(rs.getBigDecimal("invoice_amount")));
            setInvoiceDate(rs.getTimestamp("invoice_date"));
            setPaymentReceivedDate(rs.getTimestamp("payment_received_date"));
            setLastModified(AbstractDAO.getInteger(rs, "rer_lm"));
            readAll = true;
            //if (rs.getString("report_group_type_cd") != null) {
            //    do {
            //        reportTypes.add(rs.getString("report_group_type_cd"));
            //    } while (rs.next());
            //}
            //expandRptTypes();
            setTotalReportedEmissions(AbstractDAO.getFloat(rs, "total_reported_emissions"));  // includes both chargeable and not chargeable
            setValidated(AbstractDAO.translateIndicatorToBoolean(rs.getString("validated_flag")));
            setSubmitterContact(
            		rs.getInt("submitted_by_contact") == 0? 
            				null : rs.getInt("submitted_by_contact"));
            setSubmitterUser(
            		rs.getInt("submitted_by_user") == 0?
            				null : rs.getInt("submitted_by_user"));
        } catch (SQLException sqle) {
            if(!readAll) logger.warn(sqle.getMessage());
        }
    }

    public final Timestamp getRptApprovedStatusDate() {
        return rptApprovedStatusDate;
    }

    public final void setRptApprovedStatusDate(Timestamp rptApprovedStatusDate) {
        this.rptApprovedStatusDate = rptApprovedStatusDate;
        if (this.rptApprovedStatusDate != null) {
            this.rptApprovedStatusDateLong = this.rptApprovedStatusDate.getTime();
        } else {
            this.rptApprovedStatusDateLong = 0;
        }
    }
    
    public boolean belongsToGroup(Integer corrEpaEmuId) {
        // See if it belongs to a group
        boolean notFound = true;
        for (EmissionsReportEUGroup g : this.getEuGroups()) {
            for (Integer rEuId : g.getEus()) {
                if (rEuId.equals(corrEpaEmuId)) {
                    notFound = false;
                    break;
                }
            }
        }
        return !notFound;
    }

    public final EmissionsReport getComp() {
        return comp;
    }

    public final void setComp(EmissionsReport comp) {
        this.comp = comp;
    }

    public final EmissionsReport getOrig() {
        return orig;
    }

    public final void setOrig(EmissionsReport orig) {
        this.orig = orig;
    }

    public final boolean isCaution() {
        return caution;
    }

    public final void setCaution(boolean caution) {
        this.caution = caution;
    }

    public final Integer getReportModified() {
        return reportModified;
    }

    public final void setReportModified(Integer reportModified) {
        this.reportModified = reportModified;
    }

    // manually created getter
    public final boolean isExistsReportModified() {
        return reportModified != null;
    }
/*
    public final boolean isRptEIS() {
        return rptEIS;
    }

    public final void setRptEIS(boolean rptEIS) {
        this.rptEIS = rptEIS;
    }

    public final boolean isRptES() {
        return rptES;
    }

    public final void setRptES(boolean rptES) {
        this.rptES = rptES;
    }

    public final boolean isRptFER() {
        return rptFER;
    }

    public final void setRptFER(boolean rptFER) {
        this.rptFER = rptFER;
    }
    */

    public Integer getFeeId() {
        return feeId;
    }

    public void setFeeId(Integer feeId) {
        this.feeId = feeId;
    }
/*
    public boolean isEisRequired() {
        return eisRequired;
    }

    public void setEisRequired(boolean eisRequired) {
        this.eisRequired = eisRequired;
    }
*/

    public boolean isInStaging() {
        return inStaging;
    }

    public void setInStaging(boolean inStaging) {
        this.inStaging = inStaging;
    }
    
    public boolean isFromCSV() {
    	return fromCSV;
    }
    
    public void setFromCSV(boolean fromCSV) {
    	this.fromCSV = fromCSV;
    }
    
    public Integer getCompanionReport() {
        return companionReport;
    }

    public void setCompanionReport(Integer companionReport) {
        this.companionReport = companionReport;
    }

    public Contact getBillingAddr() {
        return billingAddr;
    }

    public void setBillingAddr(Contact billingAddr) {
        this.billingAddr = billingAddr;
    }

    public String getFacilityNm() {
        return facilityNm;
    }

    public void setFacilityNm(String facilityNm) {
        this.facilityNm = facilityNm;
    }

    public Contact getNewOwnerAddr() {
        return newOwnerAddr;
    }

    public void setNewOwnerAddr(Contact newOwnerAddr) {
        this.newOwnerAddr = newOwnerAddr;
    }

    public Contact getPrevOwnerForwardingAddr() {
        return prevOwnerForwardingAddr;
    }

    public void setPrevOwnerForwardingAddr(Contact prevOwnerForwardingAddr) {
        this.prevOwnerForwardingAddr = prevOwnerForwardingAddr;
    }

    public Timestamp getTransferDate() {
        return transferDate;
    }

    public void setTransferDate(Timestamp transferDate) {
        this.transferDate = transferDate;
        if (this.transferDate != null) {
            this.transferDateLong = this.transferDate.getTime();
        } else {
            this.transferDateLong = 0;
        }
    }

    public boolean isNewOwner() {
        return newOwner;
    }

    public void setNewOwner(boolean newOwner) {
        this.newOwner = newOwner;
    }

    public Timestamp getShutdownDate() {
        return shutdownDate;
    }

    public void setShutdownDate(Timestamp shutdownDate) {
        this.shutdownDate = shutdownDate;
        if (this.shutdownDate != null) {
            this.shutdownDateLong = this.shutdownDate.getTime();
        } else {
            this.shutdownDateLong = 0;
        }
    }

    public Integer getBillingAddrInteger() {
        return billingAddrInteger;
    }

    public void setBillingAddrInteger(Integer billingAddrInteger) {
        this.billingAddrInteger = billingAddrInteger;
    }

    public Integer getNewOwnerAddrInteger() {
        return newOwnerAddrInteger;
    }

    public void setNewOwnerAddrInteger(Integer newOwnerAddrInteger) {
        this.newOwnerAddrInteger = newOwnerAddrInteger;
    }

    public Integer getPrevOwnerForwardingAddrInteger() {
        return prevOwnerForwardingAddrInteger;
    }

    public void setPrevOwnerForwardingAddrInteger(
            Integer prevOwnerForwardingAddrInteger) {
        this.prevOwnerForwardingAddrInteger = prevOwnerForwardingAddrInteger;
    }

    public boolean isProvideBothYears() {
        return provideBothYears;
    }

    public void setProvideBothYears(boolean provideBothYears) {
        this.provideBothYears = provideBothYears;
    }

    public Contact getPrimaryAddr() {
        return primaryAddr;
    }

    public void setPrimaryAddr(Contact primaryAddr) {
        this.primaryAddr = primaryAddr;
    }

    public Timestamp getReceiveDate() {
        return receiveDate;
    }

    public void setReceiveDate(Timestamp receiveDate) {
        this.receiveDate = receiveDate;
        if (this.receiveDate != null) {
            this.receiveDateLong = this.receiveDate.getTime();
        } else {
            this.receiveDateLong = 0;
        }
    }

    public Integer getPrimaryAddrInteger() {
        return PrimaryAddrInteger;
    }

    public void setPrimaryAddrInteger(Integer primaryAddrInteger) {
        PrimaryAddrInteger = primaryAddrInteger;
    }

    public String getEisStatusCd() {
        return eisStatusCd;
    }

    public void setEisStatusCd(String eisStatusCd) {
        this.eisStatusCd = eisStatusCd;
    }

    public TreeSet<EmissionTotal> getEmissionTotalsTreeSet() {
        return emissionTotalsTreeSet;
    }

    public void setEmissionTotalsTreeSet(
            TreeSet<EmissionTotal> emissionTotalsTreeSet) {
        this.emissionTotalsTreeSet = emissionTotalsTreeSet;
    }

    public boolean isLegacy() {
        return legacy;
    }

    public void setLegacy(boolean legacy) {
        this.legacy = legacy;
    }

    public String getBillingContactFailureMsg() {
        return billingContactFailureMsg;
    }

    public void setBillingContactFailureMsg(String billingContactFailureMsg) {
        this.billingContactFailureMsg = billingContactFailureMsg;
    }
    
    public final long getRptReceivedStatusDateLong() {
        long date = 0;
        if (rptReceivedStatusDate != null) {
            date = rptReceivedStatusDate.getTime();
        }
        return date;
    }

    public final void setRptReceivedStatusDateLong(long rptReceivedStatusDateLong) {
        rptReceivedStatusDate = null;
        if (rptReceivedStatusDateLong > 0) {
            rptReceivedStatusDate = new Timestamp(rptReceivedStatusDateLong);
        }
    }
    
    public final long getRptApprovedStatusDateLong() {
        long date = 0;
        if (rptApprovedStatusDate != null) {
            date = rptApprovedStatusDate.getTime();
        }
        return date;
    }

    public final void setRptApprovedStatusDateLong(long rptApprovedStatusDateLong) {
        rptApprovedStatusDate = null;
        if (rptApprovedStatusDateLong > 0) {
            rptApprovedStatusDate = new Timestamp(rptApprovedStatusDateLong);
        }
    }
    
    public final long getReceiveDateLong() {
        long date = 0;
        if (receiveDate != null) {
            date = receiveDate.getTime();
        }
        return date;
    }

    public final void setReceiveDateLong(long receiveDateLong) {
        receiveDate = null;
        if (receiveDateLong > 0) {
            receiveDate = new Timestamp(receiveDateLong);
        }
    }
    
    public final long getTransferDateLong() {
        long date = 0;
        if (transferDate != null) {
            date = transferDate.getTime();
        }
        return date;
    }

    public final void setTransferDateLong(long transferDateLong) {
        transferDate = null;
        if (transferDateLong > 0) {
            transferDate = new Timestamp(transferDateLong);
        }
    }
    
    public final long getShutdownDateLong() {
        long date = 0;
        if (shutdownDate != null) {
            date = shutdownDate.getTime();
        }
        return date;
    }

    public final void setShutdownDateLong(long shutdownDateLong) {
        shutdownDate = null;
        if (shutdownDateLong > 0) {
            shutdownDate = new Timestamp(shutdownDateLong);
        }
    }
    
    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject();
        // manually set transient date values since this does not appear to
        // work properly with persistence
        setRptReceivedStatusDateLong(this.rptReceivedStatusDateLong);
        setRptApprovedStatusDateLong(this.rptApprovedStatusDateLong);
        setReceiveDateLong(this.receiveDateLong);
        setTransferDateLong(this.transferDateLong);
        setShutdownDateLong(this.shutdownDateLong);
        // set ArrayList pollutant totals into TreeSet of pollutant totals
        emissionTotalsTreeSet = new TreeSet<EmissionTotal>();
        for(EmissionTotal e : emissionTotals) {
            emissionTotalsTreeSet.add(e);
        }
    }

    public List<EmissionTotal> getEmissionTotals() {
        return emissionTotals;
    }

    public void setEmissionTotals(List<EmissionTotal> emissionTotals) {
        this.emissionTotals = emissionTotals;
        emissionTotalsTreeSet = new TreeSet<EmissionTotal>();
        for(EmissionTotal e : this.emissionTotals) {
            emissionTotalsTreeSet.add(e);
        }
    }
    
    public boolean isSubmitted() {
        return rptReceivedStatusDate != null;
    }
    
    public boolean isSubmittedCode() {
        return ReportReceivedStatusDef.isSubmittedCode(rptReceivedStatusCd);
    }
    
    public final boolean isApproved() {
        return ReportReceivedStatusDef.isApprovedCode(rptReceivedStatusCd);
    }
    
    public final boolean isReportNotNeeded(){
        return ReportReceivedStatusDef.isNotNeededCode(rptReceivedStatusCd);
    }
    
    
    public String getYears() {
        // Return the year or years covered
        String rtn;
        if(companionReport == null) {
            rtn = reportYear.toString();
        } else {
            int secondYear = reportYear;
            int firstYear = reportYear;
            if(emissionsRptId.intValue() < companionReport) {
                secondYear++;
            } else {
                firstYear--;
            }
            rtn = firstYear + "-" + secondYear;
        }
        return rtn;
    }
    
    public void locatePollutant(String pollutantCd, String useUnitNumerator, TreeSet<PollutantRow> euPoll,
             TreeSet<PollutantRow> processPoll) {
    	
        for(EmissionsReportEUGroup eEuG : euGroups) {
            if(eEuG.getPeriod() != null) {
                HashMap<String, Emissions> emissions = eEuG.getPeriod().getEmissions();
                if(emissions != null) {
                    Emissions e = emissions.get(pollutantCd);
                    if(e != null) {
                        PollutantRow pr = new PollutantRow(eEuG.getReportEuGroupName(), eEuG.getPeriod(),
                                 e.getFugitiveEmissions(), e.getStackEmissions(),
                                 e.getEmissionsUnitNumerator(), useUnitNumerator);
                        pr.setLink( "report:" + emissionsRptId + ":period:"
                                + ReportProfileBase.treeNodeId(eEuG.getPeriod()) +
                                ":" + ReportProfileBase.TV_REPORT);
                        processPoll.add(pr);

                        pr = new PollutantRow(eEuG.getReportEuGroupName(), null,
                                e.getFugitiveEmissions(), e.getStackEmissions(),
                                e.getEmissionsUnitNumerator(), useUnitNumerator);
                        pr.setLink( "report:" + emissionsRptId + ":group:"
                                + ReportProfileBase.treeNodeId(eEuG) +
                                ":" + ReportProfileBase.TV_REPORT);
                        euPoll.add(pr);
                        
                    }
                }
            }
        }
        //PollutantRow.clearEmissionsUnitNumeratorCommon();
        for(EmissionsReportEU eEu : eus) {
            if(eEu.getPeriods() == null) {
                continue;
            }
            boolean euHasPoll = false;
            Double stack = null;
            Double fugitive = null;

            for(EmissionsReportPeriod erp : eEu.getPeriods()) {
                HashMap<String, Emissions> emissions = erp.getEmissions();
                if(emissions != null) {
                    // Add it to processes
                    Emissions e = emissions.get(pollutantCd);
                    if(e != null) {
                        euHasPoll = true;
                        PollutantRow pr = new PollutantRow(eEu.getEpaEmuId(), erp,
                                e.getFugitiveEmissions(), e.getStackEmissions(),
                                e.getEmissionsUnitNumerator(), useUnitNumerator);
                        pr.setLink( "report:" + emissionsRptId + ":period:"
                                + ReportProfileBase.treeNodeId(erp) +
                                ":" + ReportProfileBase.TV_REPORT);
                        processPoll.add(pr);
                        // accumulate for EU
                        stack = PollutantRow.add(stack, e.getStackEmissions(), e.getEmissionsUnitNumerator(), useUnitNumerator);
                        fugitive = PollutantRow.add(fugitive, e.getFugitiveEmissions(), e.getEmissionsUnitNumerator(), useUnitNumerator);
                    }
                }
            }
            if(euHasPoll) {
                // Add accumulation to EU
                PollutantRow pr = new PollutantRow(eEu.getEpaEmuId(), stack, fugitive, useUnitNumerator);
                pr.setLink( "report:" + emissionsRptId + ":unit:" + ReportProfileBase.treeNodeId(eEu) +
                        ":" + ReportProfileBase.TV_REPORT);
                euPoll.add(pr);
            }
        }
    }
    
    public final void getReportEmuIds(Facility facility, ReportTemplates rptT,
            ArrayList<Integer> euListBasic, ArrayList<Integer> euList) {
        // euListBasic is all EUs that had emissions whether in group or not.
        // euList are those that had EU emissions over the threshold.
        // Do Facility Validate of the EUs: if not EG71, no other errors and operated.
        for(EmissionsReportEU eu : getEus()) {
            if(eu.isCaution() || eu.isNotInFacility()) {
                continue;
            }
            if(eu.isBelowRequirements() || eu.isZeroEmissions()) {
                continue;
            }
            Integer id = eu.getEmuId();
            if(id == null) {
                // may have EUs in report with no correspondence in facility
                continue;
            }
            if(eu.getPeriods().size() > 0) {
                addElm(id, euListBasic);
                // Any over threshold
                try {
                ArrayList<EmissionRow>  euEmissions = EmissionRow.getEmissions(eu, false,
                        new Integer(1), rptT, logger);
                for(EmissionRow er : euEmissions) {
                    if(er.getOrder() == null) {
                        break;  // no more criteria pollutants left
                    }
                    if(er.isExceedThresholdQA()) {
                        euList.add(id); // found one over the threshold
                        break;
                    }
                }
                } catch(ApplicationException ae) {
                    String s = "Application exception on Emissions Inventory ID " + this.emissionsInventoryId +
                        " and EU " + eu.getEpaEmuId();
                    logger.error(s, ae);
                }
            }
        }
        for(EmissionsReportEUGroup euG : getEuGroups()) {
            if(euG.isCaution() || euG.isNotInFacility()) {
                continue;
            }
            for(Integer corrId : euG.getEus()) {
                EmissionUnit eu = facility.getMatchingEmissionUnit(corrId);
                if(eu == null) {
                    logger.error("In internalSubmitVerify(), could not find eu with corrId "
                            + corrId + " in facility with fpId " + facility.getFpId()
                            + " for Emissions Inventory ID = " + emissionsInventoryId);
                } else {
                    Integer id = eu.getEmuId();
                    if(id == null) {
                        // may have EUs in report with no correspondence in facility
                        continue;
                    }
                    addElm(id, euListBasic);
                }
            }
        }
    }
    
    private void addElm(Integer i, List<Integer> lst) {
        boolean contains = false;
        for(Integer iv : lst) {
            if(iv.equals(i)) {
                contains = true;
                break;
            }
        }
        if(!contains) {
            lst.add(i);
        }
    }
    
    public final boolean zeroEmissions() {
        boolean zero = true;
        for (EmissionsReportEUGroup g : euGroups) {
            if (!g.zeroEmissions()) {
                zero = false;
                break;
            }
        }
        if(zero) {
            for(EmissionsReportEU eEu : eus) {
                if(eEu.getPeriods() == null || eEu.getPeriods().size() == 0) {
                    if(eEu.isBelowRequirements()) {
                        zero = false;
                        break;
                    }
                    continue;
                }
                if(!eEu.zeroEmissions()) {
                    zero = false;
                    break;
                }
            }
        }
        return zero;
    }

    public boolean isAutoGenerated() {
        return autoGenerated;
    }

    public void setAutoGenerated(boolean autoGenerated) {
        this.autoGenerated = autoGenerated;
    }

    public String getSubmitLabel() {
        return submitLabel;
    }

    public void setSubmitLabel(String submitLabel) {
        this.submitLabel = submitLabel;
    }

    public String getSubmitValue() {
        return submitValue;
    }

    public void setSubmitValue(String submitValue) {
        this.submitValue = submitValue;
    }

    public String getRevisionReason() {
        return revisionReason;
    }

    public void setRevisionReason(String revisionReason) {
        this.revisionReason = revisionReason;
    }
    
    public boolean containsTradeSecretProcessData() {
    	boolean rtn = false;
    	for(EmissionsReportEU eu : this.getEus()) {
    		for(EmissionsReportPeriod erp : eu.getPeriods()) {
    			if(erp.isTradeSecretS()) rtn = true;
    		}
    	}
    	for(EmissionsReportEUGroup eug : this.getEuGroups()) {
    		EmissionsReportPeriod erg = eug.getPeriod();
    		if(erg.isTradeSecretS()) rtn = true;
    	}
    	return rtn;
    }
    
    public boolean attachmentsContainTradeSecrets() {
    	return attachmentsContainTradeSecrets(true);
    }
    
    public boolean attachmentsContainTradeSecrets(boolean includeAllAttachments) {
    	boolean rtn = false;
    	for(EmissionsDocumentRef r : getAttachments()) {
    		if(r.getTradeSecretDoc() != null && (includeAllAttachments || (getRptReceivedStatusDate() != null && r.getLastModifiedTS() != null
					&& r.getLastModifiedTS().before(getRptReceivedStatusDate())) || r.isTradeSecretAllowed())) rtn = true;
    	}
    	return rtn;
    }
    
    public final Float getTotalReportedEmissions() {
        return totalReportedEmissions;
    }

    public final void setTotalReportedEmissions(Float totalReportedEmissions) {
        this.totalReportedEmissions = totalReportedEmissions;
    }
    
    public boolean isContainsTS() {
		return containsTS;
	}

	public void setContainsTS(boolean containsTS) {
		this.containsTS = containsTS;
	}

	public Integer getFeeId2() {
		return feeId2;
	}

	public void setFeeId2(Integer feeId2) {
		this.feeId2 = feeId2;
	}
	
	public final boolean isValidated() {
		return validated;
	}

	public final void setValidated(boolean validated) {
		this.validated = validated;
	}

	public String getInvoiceAmount() {
		
		 String amount="";
		try{
			String pattern="###,###,##0.00";
	        DecimalFormat myFormatter = new DecimalFormat(pattern);
	        boolean isTrue = isAmountNumeric(invoiceAmount.replaceAll(",","").replaceAll("\\$",""));
	        if(isTrue && (invoiceAmount.replaceAll(",","").replaceAll("\\$","")!=null)){	        	
	        		amount = myFormatter.format(Double.parseDouble(invoiceAmount));
	        }else{
	        	if(CompMgr.getAppName().equals(CommonConst.INTERNAL_APP)){
	   			 DisplayUtil.displayError("Invoice Amount:  must be a number.");  
	   			 return null;
	   			}
	        }
	        amount = "$".concat(amount);	        
		}catch(Exception ex){	
			if(CompMgr.getAppName().equals(CommonConst.INTERNAL_APP)){
			 DisplayUtil.displayError("Invoice Amount: "+ex.getMessage()+" must be a number.");  
			}
        	 return null;
        }
		return amount;
	}
	
	public static boolean isAmountNumeric(String str)
	{
//		System.out.println("str: "+str);
		//Float f = Float.parseFloat(str);
		//System.out.println("f.toString()"+f.toString());
	    for (char c : str.toCharArray())
	    {
	    	if(c!='.'){
		        if (!Character.isDigit(c)) {
		        	return false;
		        }
	    	}
	    }
	    return true;
	}

	public void setInvoiceAmount(String invoiceAmount) {
		invoiceAmount = invoiceAmount.replaceAll(",","");
		invoiceAmount = invoiceAmount.replaceAll("\\$","");
		this.invoiceAmount = invoiceAmount;	
	}

	public Timestamp getInvoiceDate() {
		return invoiceDate;
	}

	public void setInvoiceDate(Timestamp invoiceDate) {
		this.invoiceDate = invoiceDate;
	}

	public Timestamp getPaymentReceivedDate() {
		return paymentReceivedDate;
	}

	public void setPaymentReceivedDate(Timestamp paymentReceivedDate) {
		this.paymentReceivedDate = paymentReceivedDate;
	}

	public Integer getSubmitterContact() {
		return submitterContact;
	}

	public void setSubmitterContact(Integer submitterContact) {
		this.submitterContact = submitterContact;
	}

	public Integer getSubmitterUser() {
		return submitterUser;
	}

	public void setSubmitterUser(Integer submitterUser) {
		this.submitterUser = submitterUser;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime
				* result
				+ ((PrimaryAddrInteger == null) ? 0 : PrimaryAddrInteger
						.hashCode());
		result = prime * result
				+ ((attachments == null) ? 0 : attachments.hashCode());
		result = prime * result + (autoGenerated ? 1231 : 1237);
		result = prime * result
				+ ((billingAddr == null) ? 0 : billingAddr.hashCode());
		result = prime
				* result
				+ ((billingAddrInteger == null) ? 0 : billingAddrInteger
						.hashCode());
		result = prime
				* result
				+ ((billingContactFailureMsg == null) ? 0
						: billingContactFailureMsg.hashCode());
		result = prime * result + (caution ? 1231 : 1237);
		result = prime * result + ((comp == null) ? 0 : comp.hashCode());
		result = prime * result
				+ ((companionReport == null) ? 0 : companionReport.hashCode());
		result = prime * result
				+ ((eisStatusCd == null) ? 0 : eisStatusCd.hashCode());
		result = prime * result
				+ ((emissionTotals == null) ? 0 : emissionTotals.hashCode());
		result = prime
				* result
				+ ((emissionsInventoryId == null) ? 0 : emissionsInventoryId
						.hashCode());
		result = prime * result
				+ ((emissionsRptId == null) ? 0 : emissionsRptId.hashCode());
		result = prime * result
				+ ((euGroups == null) ? 0 : euGroups.hashCode());
		result = prime * result + ((eus == null) ? 0 : eus.hashCode());
		result = prime * result
				+ ((facilityNm == null) ? 0 : facilityNm.hashCode());
		result = prime * result + ((feeId == null) ? 0 : feeId.hashCode());
		result = prime * result + ((feeId2 == null) ? 0 : feeId2.hashCode());
		result = prime * result + ((fpId == null) ? 0 : fpId.hashCode());
		result = prime * result + (inStaging ? 1231 : 1237);
		result = prime * result
				+ ((invoiceAmount == null) ? 0 : invoiceAmount.hashCode());
		result = prime * result
				+ ((invoiceDate == null) ? 0 : invoiceDate.hashCode());
		result = prime * result + (legacy ? 1231 : 1237);
		result = prime * result + (newOwner ? 1231 : 1237);
		result = prime * result
				+ ((newOwnerAddr == null) ? 0 : newOwnerAddr.hashCode());
		result = prime
				* result
				+ ((newOwnerAddrInteger == null) ? 0 : newOwnerAddrInteger
						.hashCode());
		result = prime * result + ((notes == null) ? 0 : notes.hashCode());
		result = prime * result + ((orig == null) ? 0 : orig.hashCode());
		result = prime
				* result
				+ ((paymentReceivedDate == null) ? 0 : paymentReceivedDate
						.hashCode());
		result = prime
				* result
				+ ((prevOwnerForwardingAddr == null) ? 0
						: prevOwnerForwardingAddr.hashCode());
		result = prime
				* result
				+ ((prevOwnerForwardingAddrInteger == null) ? 0
						: prevOwnerForwardingAddrInteger.hashCode());
		result = prime * result
				+ ((primaryAddr == null) ? 0 : primaryAddr.hashCode());
		result = prime * result + (provideBothYears ? 1231 : 1237);
		result = prime * result
				+ (int) (receiveDateLong ^ (receiveDateLong >>> 32));
		result = prime * result
				+ ((reportModified == null) ? 0 : reportModified.hashCode());
		result = prime * result
				+ ((reportYear == null) ? 0 : reportYear.hashCode());
		result = prime * result + (required ? 1231 : 1237);
		result = prime * result
				+ ((revisionReason == null) ? 0 : revisionReason.hashCode());
		result = prime
				* result
				+ (int) (rptApprovedStatusDateLong ^ (rptApprovedStatusDateLong >>> 32));
		result = prime
				* result
				+ ((rptReceivedStatusCd == null) ? 0 : rptReceivedStatusCd
						.hashCode());
		result = prime
				* result
				+ (int) (rptReceivedStatusDateLong ^ (rptReceivedStatusDateLong >>> 32));
		result = prime * result
				+ (int) (shutdownDateLong ^ (shutdownDateLong >>> 32));
		result = prime
				* result
				+ ((submitterContact == null) ? 0 : submitterContact.hashCode());
		result = prime * result
				+ ((submitterUser == null) ? 0 : submitterUser.hashCode());
		result = prime * result
				+ ((totalEmissions == null) ? 0 : totalEmissions.hashCode());
		result = prime
				* result
				+ ((totalReportedEmissions == null) ? 0
						: totalReportedEmissions.hashCode());
		result = prime * result
				+ (int) (transferDateLong ^ (transferDateLong >>> 32));
		result = prime * result + (validated ? 1231 : 1237);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		EmissionsReport other = (EmissionsReport) obj;
		if (PrimaryAddrInteger == null) {
			if (other.PrimaryAddrInteger != null)
				return false;
		} else if (!PrimaryAddrInteger.equals(other.PrimaryAddrInteger))
			return false;
		if (attachments == null) {
			if (other.attachments != null)
				return false;
		} else if (!attachments.equals(other.attachments))
			return false;
		if (autoGenerated != other.autoGenerated)
			return false;
		if (billingAddr == null) {
			if (other.billingAddr != null)
				return false;
		} else if (!billingAddr.equals(other.billingAddr))
			return false;
		if (billingAddrInteger == null) {
			if (other.billingAddrInteger != null)
				return false;
		} else if (!billingAddrInteger.equals(other.billingAddrInteger))
			return false;
		if (billingContactFailureMsg == null) {
			if (other.billingContactFailureMsg != null)
				return false;
		} else if (!billingContactFailureMsg
				.equals(other.billingContactFailureMsg))
			return false;
		if (caution != other.caution)
			return false;
		if (comp == null) {
			if (other.comp != null)
				return false;
		} else if (!comp.equals(other.comp))
			return false;
		if (companionReport == null) {
			if (other.companionReport != null)
				return false;
		} else if (!companionReport.equals(other.companionReport))
			return false;
		if (eisStatusCd == null) {
			if (other.eisStatusCd != null)
				return false;
		} else if (!eisStatusCd.equals(other.eisStatusCd))
			return false;
		if (emissionTotals == null) {
			if (other.emissionTotals != null)
				return false;
		} else if (!emissionTotals.equals(other.emissionTotals))
			return false;
		if (emissionsInventoryId == null) {
			if (other.emissionsInventoryId != null)
				return false;
		} else if (!emissionsInventoryId.equals(other.emissionsInventoryId))
			return false;
		if (emissionsRptId == null) {
			if (other.emissionsRptId != null)
				return false;
		} else if (!emissionsRptId.equals(other.emissionsRptId))
			return false;
		if (euGroups == null) {
			if (other.euGroups != null)
				return false;
		} else if (!euGroups.equals(other.euGroups))
			return false;
		if (eus == null) {
			if (other.eus != null)
				return false;
		} else if (!eus.equals(other.eus))
			return false;
		if (facilityNm == null) {
			if (other.facilityNm != null)
				return false;
		} else if (!facilityNm.equals(other.facilityNm))
			return false;
		if (feeId == null) {
			if (other.feeId != null)
				return false;
		} else if (!feeId.equals(other.feeId))
			return false;
		if (feeId2 == null) {
			if (other.feeId2 != null)
				return false;
		} else if (!feeId2.equals(other.feeId2))
			return false;
		if (fpId == null) {
			if (other.fpId != null)
				return false;
		} else if (!fpId.equals(other.fpId))
			return false;
		if (inStaging != other.inStaging)
			return false;
		if (invoiceAmount == null) {
			if (other.invoiceAmount != null)
				return false;
		} else if (!invoiceAmount.equals(other.invoiceAmount))
			return false;
		if (invoiceDate == null) {
			if (other.invoiceDate != null)
				return false;
		} else if (!invoiceDate.equals(other.invoiceDate))
			return false;
		if (legacy != other.legacy)
			return false;
		if (newOwner != other.newOwner)
			return false;
		if (newOwnerAddr == null) {
			if (other.newOwnerAddr != null)
				return false;
		} else if (!newOwnerAddr.equals(other.newOwnerAddr))
			return false;
		if (newOwnerAddrInteger == null) {
			if (other.newOwnerAddrInteger != null)
				return false;
		} else if (!newOwnerAddrInteger.equals(other.newOwnerAddrInteger))
			return false;
		if (notes == null) {
			if (other.notes != null)
				return false;
		} else if (!notes.equals(other.notes))
			return false;
		if (orig == null) {
			if (other.orig != null)
				return false;
		} else if (!orig.equals(other.orig))
			return false;
		if (paymentReceivedDate == null) {
			if (other.paymentReceivedDate != null)
				return false;
		} else if (!paymentReceivedDate.equals(other.paymentReceivedDate))
			return false;
		if (prevOwnerForwardingAddr == null) {
			if (other.prevOwnerForwardingAddr != null)
				return false;
		} else if (!prevOwnerForwardingAddr
				.equals(other.prevOwnerForwardingAddr))
			return false;
		if (prevOwnerForwardingAddrInteger == null) {
			if (other.prevOwnerForwardingAddrInteger != null)
				return false;
		} else if (!prevOwnerForwardingAddrInteger
				.equals(other.prevOwnerForwardingAddrInteger))
			return false;
		if (primaryAddr == null) {
			if (other.primaryAddr != null)
				return false;
		} else if (!primaryAddr.equals(other.primaryAddr))
			return false;
		if (provideBothYears != other.provideBothYears)
			return false;
		if (receiveDateLong != other.receiveDateLong)
			return false;
		if (reportModified == null) {
			if (other.reportModified != null)
				return false;
		} else if (!reportModified.equals(other.reportModified))
			return false;
		if (reportYear == null) {
			if (other.reportYear != null)
				return false;
		} else if (!reportYear.equals(other.reportYear))
			return false;
		if (required != other.required)
			return false;
		if (revisionReason == null) {
			if (other.revisionReason != null)
				return false;
		} else if (!revisionReason.equals(other.revisionReason))
			return false;
		if (rptApprovedStatusDateLong != other.rptApprovedStatusDateLong)
			return false;
		if (rptReceivedStatusCd == null) {
			if (other.rptReceivedStatusCd != null)
				return false;
		} else if (!rptReceivedStatusCd.equals(other.rptReceivedStatusCd))
			return false;
		if (rptReceivedStatusDateLong != other.rptReceivedStatusDateLong)
			return false;
		if (shutdownDateLong != other.shutdownDateLong)
			return false;
		if (submitterContact == null) {
			if (other.submitterContact != null)
				return false;
		} else if (!submitterContact.equals(other.submitterContact))
			return false;
		if (submitterUser == null) {
			if (other.submitterUser != null)
				return false;
		} else if (!submitterUser.equals(other.submitterUser))
			return false;
		if (totalEmissions == null) {
			if (other.totalEmissions != null)
				return false;
		} else if (!totalEmissions.equals(other.totalEmissions))
			return false;
		if (totalReportedEmissions == null) {
			if (other.totalReportedEmissions != null)
				return false;
		} else if (!totalReportedEmissions.equals(other.totalReportedEmissions))
			return false;
		if (transferDateLong != other.transferDateLong)
			return false;
		if (validated != other.validated)
			return false;
		return true;
	}
	
	public double getMaxHoursInReportingPeriod() {
		ContentTypeDef contentTypeDef = ContentTypeDef.getContentTypeDef(this
				.getContentTypeCd());
		
		LocalDate periodStarDate = LocalDate.of(this.getReportYear(),
				contentTypeDef.getStartMonth(), contentTypeDef.getStartDay());
		
		LocalDate periodEndDate = LocalDate.of(this.getReportYear(),
				contentTypeDef.getEndMonth(), contentTypeDef.getEndDay());

		long daysInBetween = ChronoUnit.DAYS.between(periodStarDate,
				periodEndDate) + 1; // add 1 for the days to be inclusive

		double maxHours = daysInBetween * 24;

		return maxHours;
	}

	public List<String> getInspectionsReferencedIn() {
		if (inspectionsReferencedIn == null) return new ArrayList<String>();
		return inspectionsReferencedIn;
	}

	public void setInspectionsReferencedIn(List<String> inspectionsReferencedIn) {
		this.inspectionsReferencedIn = inspectionsReferencedIn;
	}
}
